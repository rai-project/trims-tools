// Package models contains the types for schema ''.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
)

// CuptiActivityKindKernel represents a row from 'CUPTI_ACTIVITY_KIND_KERNEL'.
type CuptiActivityKindKernel struct {
	ID                              sql.NullInt64 `json:"_id_"`                            // _id_
	Cacheconfig                     []byte        `json:"cacheConfig"`                     // cacheConfig
	Sharedmemoryconfig              int           `json:"sharedMemoryConfig"`              // sharedMemoryConfig
	Registersperthread              int           `json:"registersPerThread"`              // registersPerThread
	Partitionedglobalcacherequested int           `json:"partitionedGlobalCacheRequested"` // partitionedGlobalCacheRequested
	Partitionedglobalcacheexecuted  int           `json:"partitionedGlobalCacheExecuted"`  // partitionedGlobalCacheExecuted
	Start                           int           `json:"start"`                           // start
	End                             int           `json:"end"`                             // end
	Completed                       int           `json:"completed"`                       // completed
	Deviceid                        int           `json:"deviceId"`                        // deviceId
	Contextid                       int           `json:"contextId"`                       // contextId
	Streamid                        int           `json:"streamId"`                        // streamId
	Gridx                           int           `json:"gridX"`                           // gridX
	Gridy                           int           `json:"gridY"`                           // gridY
	Gridz                           int           `json:"gridZ"`                           // gridZ
	Blockx                          int           `json:"blockX"`                          // blockX
	Blocky                          int           `json:"blockY"`                          // blockY
	Blockz                          int           `json:"blockZ"`                          // blockZ
	Staticsharedmemory              int           `json:"staticSharedMemory"`              // staticSharedMemory
	Dynamicsharedmemory             int           `json:"dynamicSharedMemory"`             // dynamicSharedMemory
	Localmemoryperthread            int           `json:"localMemoryPerThread"`            // localMemoryPerThread
	Localmemorytotal                int           `json:"localMemoryTotal"`                // localMemoryTotal
	Correlationid                   int           `json:"correlationId"`                   // correlationId
	Gridid                          int           `json:"gridId"`                          // gridId
	Name                            int           `json:"name"`                            // name
	Queued                          int           `json:"queued"`                          // queued
	Submitted                       int           `json:"submitted"`                       // submitted
	Launchtype                      int           `json:"launchType"`                      // launchType
	Issharedmemorycarveoutrequested int           `json:"isSharedMemoryCarveoutRequested"` // isSharedMemoryCarveoutRequested
	Sharedmemorycarveoutrequested   int           `json:"sharedMemoryCarveoutRequested"`   // sharedMemoryCarveoutRequested

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the CuptiActivityKindKernel exists in the database.
func (cakk *CuptiActivityKindKernel) Exists() bool {
	return cakk._exists
}

// Deleted provides information if the CuptiActivityKindKernel has been deleted from the database.
func (cakk *CuptiActivityKindKernel) Deleted() bool {
	return cakk._deleted
}

// Insert inserts the CuptiActivityKindKernel to the database.
func (cakk *CuptiActivityKindKernel) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if cakk._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO CUPTI_ACTIVITY_KIND_KERNEL (` +
		`cacheConfig, sharedMemoryConfig, registersPerThread, partitionedGlobalCacheRequested, partitionedGlobalCacheExecuted, start, end, completed, deviceId, contextId, streamId, gridX, gridY, gridZ, blockX, blockY, blockZ, staticSharedMemory, dynamicSharedMemory, localMemoryPerThread, localMemoryTotal, correlationId, gridId, name, queued, submitted, launchType, isSharedMemoryCarveoutRequested, sharedMemoryCarveoutRequested` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, cakk.Cacheconfig, cakk.Sharedmemoryconfig, cakk.Registersperthread, cakk.Partitionedglobalcacherequested, cakk.Partitionedglobalcacheexecuted, cakk.Start, cakk.End, cakk.Completed, cakk.Deviceid, cakk.Contextid, cakk.Streamid, cakk.Gridx, cakk.Gridy, cakk.Gridz, cakk.Blockx, cakk.Blocky, cakk.Blockz, cakk.Staticsharedmemory, cakk.Dynamicsharedmemory, cakk.Localmemoryperthread, cakk.Localmemorytotal, cakk.Correlationid, cakk.Gridid, cakk.Name, cakk.Queued, cakk.Submitted, cakk.Launchtype, cakk.Issharedmemorycarveoutrequested, cakk.Sharedmemorycarveoutrequested)
	res, err := db.Exec(sqlstr, cakk.Cacheconfig, cakk.Sharedmemoryconfig, cakk.Registersperthread, cakk.Partitionedglobalcacherequested, cakk.Partitionedglobalcacheexecuted, cakk.Start, cakk.End, cakk.Completed, cakk.Deviceid, cakk.Contextid, cakk.Streamid, cakk.Gridx, cakk.Gridy, cakk.Gridz, cakk.Blockx, cakk.Blocky, cakk.Blockz, cakk.Staticsharedmemory, cakk.Dynamicsharedmemory, cakk.Localmemoryperthread, cakk.Localmemorytotal, cakk.Correlationid, cakk.Gridid, cakk.Name, cakk.Queued, cakk.Submitted, cakk.Launchtype, cakk.Issharedmemorycarveoutrequested, cakk.Sharedmemorycarveoutrequested)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	cakk.ID = sql.NullInt64(id)
	cakk._exists = true

	return nil
}

// Update updates the CuptiActivityKindKernel in the database.
func (cakk *CuptiActivityKindKernel) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !cakk._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if cakk._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE CUPTI_ACTIVITY_KIND_KERNEL SET ` +
		`cacheConfig = ?, sharedMemoryConfig = ?, registersPerThread = ?, partitionedGlobalCacheRequested = ?, partitionedGlobalCacheExecuted = ?, start = ?, end = ?, completed = ?, deviceId = ?, contextId = ?, streamId = ?, gridX = ?, gridY = ?, gridZ = ?, blockX = ?, blockY = ?, blockZ = ?, staticSharedMemory = ?, dynamicSharedMemory = ?, localMemoryPerThread = ?, localMemoryTotal = ?, correlationId = ?, gridId = ?, name = ?, queued = ?, submitted = ?, launchType = ?, isSharedMemoryCarveoutRequested = ?, sharedMemoryCarveoutRequested = ?` +
		` WHERE _id_ = ?`

	// run query
	XOLog(sqlstr, cakk.Cacheconfig, cakk.Sharedmemoryconfig, cakk.Registersperthread, cakk.Partitionedglobalcacherequested, cakk.Partitionedglobalcacheexecuted, cakk.Start, cakk.End, cakk.Completed, cakk.Deviceid, cakk.Contextid, cakk.Streamid, cakk.Gridx, cakk.Gridy, cakk.Gridz, cakk.Blockx, cakk.Blocky, cakk.Blockz, cakk.Staticsharedmemory, cakk.Dynamicsharedmemory, cakk.Localmemoryperthread, cakk.Localmemorytotal, cakk.Correlationid, cakk.Gridid, cakk.Name, cakk.Queued, cakk.Submitted, cakk.Launchtype, cakk.Issharedmemorycarveoutrequested, cakk.Sharedmemorycarveoutrequested, cakk.ID)
	_, err = db.Exec(sqlstr, cakk.Cacheconfig, cakk.Sharedmemoryconfig, cakk.Registersperthread, cakk.Partitionedglobalcacherequested, cakk.Partitionedglobalcacheexecuted, cakk.Start, cakk.End, cakk.Completed, cakk.Deviceid, cakk.Contextid, cakk.Streamid, cakk.Gridx, cakk.Gridy, cakk.Gridz, cakk.Blockx, cakk.Blocky, cakk.Blockz, cakk.Staticsharedmemory, cakk.Dynamicsharedmemory, cakk.Localmemoryperthread, cakk.Localmemorytotal, cakk.Correlationid, cakk.Gridid, cakk.Name, cakk.Queued, cakk.Submitted, cakk.Launchtype, cakk.Issharedmemorycarveoutrequested, cakk.Sharedmemorycarveoutrequested, cakk.ID)
	return err
}

// Save saves the CuptiActivityKindKernel to the database.
func (cakk *CuptiActivityKindKernel) Save(db XODB) error {
	if cakk.Exists() {
		return cakk.Update(db)
	}

	return cakk.Insert(db)
}

// Delete deletes the CuptiActivityKindKernel from the database.
func (cakk *CuptiActivityKindKernel) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !cakk._exists {
		return nil
	}

	// if deleted, bail
	if cakk._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM CUPTI_ACTIVITY_KIND_KERNEL WHERE _id_ = ?`

	// run query
	XOLog(sqlstr, cakk.ID)
	_, err = db.Exec(sqlstr, cakk.ID)
	if err != nil {
		return err
	}

	// set deleted
	cakk._deleted = true

	return nil
}

// CuptiActivityKindKernelByID retrieves a row from 'CUPTI_ACTIVITY_KIND_KERNEL' as a CuptiActivityKindKernel.
//
// Generated from index 'CUPTI_ACTIVITY_KIND_KERNEL__id__pkey'.
func CuptiActivityKindKernelByID(db XODB, id sql.NullInt64) (*CuptiActivityKindKernel, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`_id_, cacheConfig, sharedMemoryConfig, registersPerThread, partitionedGlobalCacheRequested, partitionedGlobalCacheExecuted, start, end, completed, deviceId, contextId, streamId, gridX, gridY, gridZ, blockX, blockY, blockZ, staticSharedMemory, dynamicSharedMemory, localMemoryPerThread, localMemoryTotal, correlationId, gridId, name, queued, submitted, launchType, isSharedMemoryCarveoutRequested, sharedMemoryCarveoutRequested ` +
		`FROM CUPTI_ACTIVITY_KIND_KERNEL ` +
		`WHERE _id_ = ?`

	// run query
	XOLog(sqlstr, id)
	cakk := CuptiActivityKindKernel{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&cakk.ID, &cakk.Cacheconfig, &cakk.Sharedmemoryconfig, &cakk.Registersperthread, &cakk.Partitionedglobalcacherequested, &cakk.Partitionedglobalcacheexecuted, &cakk.Start, &cakk.End, &cakk.Completed, &cakk.Deviceid, &cakk.Contextid, &cakk.Streamid, &cakk.Gridx, &cakk.Gridy, &cakk.Gridz, &cakk.Blockx, &cakk.Blocky, &cakk.Blockz, &cakk.Staticsharedmemory, &cakk.Dynamicsharedmemory, &cakk.Localmemoryperthread, &cakk.Localmemorytotal, &cakk.Correlationid, &cakk.Gridid, &cakk.Name, &cakk.Queued, &cakk.Submitted, &cakk.Launchtype, &cakk.Issharedmemorycarveoutrequested, &cakk.Sharedmemorycarveoutrequested)
	if err != nil {
		return nil, err
	}

	return &cakk, nil
}

// CuptiActivityKindKernelsByCorrelationid retrieves a row from 'CUPTI_ACTIVITY_KIND_KERNEL' as a CuptiActivityKindKernel.
//
// Generated from index 'INDEX_CUPTI_ACTIVITY_KIND_KERNEL'.
func CuptiActivityKindKernelsByCorrelationid(db XODB, correlationid int) ([]*CuptiActivityKindKernel, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`_id_, cacheConfig, sharedMemoryConfig, registersPerThread, partitionedGlobalCacheRequested, partitionedGlobalCacheExecuted, start, end, completed, deviceId, contextId, streamId, gridX, gridY, gridZ, blockX, blockY, blockZ, staticSharedMemory, dynamicSharedMemory, localMemoryPerThread, localMemoryTotal, correlationId, gridId, name, queued, submitted, launchType, isSharedMemoryCarveoutRequested, sharedMemoryCarveoutRequested ` +
		`FROM CUPTI_ACTIVITY_KIND_KERNEL ` +
		`WHERE correlationId = ?`

	// run query
	XOLog(sqlstr, correlationid)
	q, err := db.Query(sqlstr, correlationid)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*CuptiActivityKindKernel{}
	for q.Next() {
		cakk := CuptiActivityKindKernel{
			_exists: true,
		}

		// scan
		err = q.Scan(&cakk.ID, &cakk.Cacheconfig, &cakk.Sharedmemoryconfig, &cakk.Registersperthread, &cakk.Partitionedglobalcacherequested, &cakk.Partitionedglobalcacheexecuted, &cakk.Start, &cakk.End, &cakk.Completed, &cakk.Deviceid, &cakk.Contextid, &cakk.Streamid, &cakk.Gridx, &cakk.Gridy, &cakk.Gridz, &cakk.Blockx, &cakk.Blocky, &cakk.Blockz, &cakk.Staticsharedmemory, &cakk.Dynamicsharedmemory, &cakk.Localmemoryperthread, &cakk.Localmemorytotal, &cakk.Correlationid, &cakk.Gridid, &cakk.Name, &cakk.Queued, &cakk.Submitted, &cakk.Launchtype, &cakk.Issharedmemorycarveoutrequested, &cakk.Sharedmemorycarveoutrequested)
		if err != nil {
			return nil, err
		}

		res = append(res, &cakk)
	}

	return res, nil
}
