// Package models contains the types for schema ''.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
)

// CuptiActivityKindMetricInstance represents a row from 'CUPTI_ACTIVITY_KIND_METRIC_INSTANCE'.
type CuptiActivityKindMetricInstance struct {
	ID            sql.NullInt64 `json:"_id_"`          // _id_
	ID            int           `json:"id"`            // id
	Value         []byte        `json:"value"`         // value
	Instance      int           `json:"instance"`      // instance
	Correlationid int           `json:"correlationId"` // correlationId
	Flags         int           `json:"flags"`         // flags

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the CuptiActivityKindMetricInstance exists in the database.
func (cakmi *CuptiActivityKindMetricInstance) Exists() bool {
	return cakmi._exists
}

// Deleted provides information if the CuptiActivityKindMetricInstance has been deleted from the database.
func (cakmi *CuptiActivityKindMetricInstance) Deleted() bool {
	return cakmi._deleted
}

// Insert inserts the CuptiActivityKindMetricInstance to the database.
func (cakmi *CuptiActivityKindMetricInstance) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if cakmi._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO CUPTI_ACTIVITY_KIND_METRIC_INSTANCE (` +
		`value, instance, correlationId, flags` +
		`) VALUES (` +
		`?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, cakmi.Value, cakmi.Instance, cakmi.Correlationid, cakmi.Flags)
	res, err := db.Exec(sqlstr, cakmi.Value, cakmi.Instance, cakmi.Correlationid, cakmi.Flags)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	cakmi.ID = sql.NullInt64(id)
	cakmi._exists = true

	return nil
}

// Update updates the CuptiActivityKindMetricInstance in the database.
func (cakmi *CuptiActivityKindMetricInstance) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !cakmi._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if cakmi._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE CUPTI_ACTIVITY_KIND_METRIC_INSTANCE SET ` +
		`value = ?, instance = ?, correlationId = ?, flags = ?` +
		` WHERE _id_ = ?`

	// run query
	XOLog(sqlstr, cakmi.Value, cakmi.Instance, cakmi.Correlationid, cakmi.Flags, cakmi.ID)
	_, err = db.Exec(sqlstr, cakmi.Value, cakmi.Instance, cakmi.Correlationid, cakmi.Flags, cakmi.ID)
	return err
}

// Save saves the CuptiActivityKindMetricInstance to the database.
func (cakmi *CuptiActivityKindMetricInstance) Save(db XODB) error {
	if cakmi.Exists() {
		return cakmi.Update(db)
	}

	return cakmi.Insert(db)
}

// Delete deletes the CuptiActivityKindMetricInstance from the database.
func (cakmi *CuptiActivityKindMetricInstance) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !cakmi._exists {
		return nil
	}

	// if deleted, bail
	if cakmi._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM CUPTI_ACTIVITY_KIND_METRIC_INSTANCE WHERE _id_ = ?`

	// run query
	XOLog(sqlstr, cakmi.ID)
	_, err = db.Exec(sqlstr, cakmi.ID)
	if err != nil {
		return err
	}

	// set deleted
	cakmi._deleted = true

	return nil
}

// CuptiActivityKindMetricInstanceByID retrieves a row from 'CUPTI_ACTIVITY_KIND_METRIC_INSTANCE' as a CuptiActivityKindMetricInstance.
//
// Generated from index 'CUPTI_ACTIVITY_KIND_METRIC_INSTANCE__id__pkey'.
func CuptiActivityKindMetricInstanceByID(db XODB, id sql.NullInt64) (*CuptiActivityKindMetricInstance, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`_id_, id, value, instance, correlationId, flags ` +
		`FROM CUPTI_ACTIVITY_KIND_METRIC_INSTANCE ` +
		`WHERE _id_ = ?`

	// run query
	XOLog(sqlstr, id)
	cakmi := CuptiActivityKindMetricInstance{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&cakmi.ID, &cakmi.ID, &cakmi.Value, &cakmi.Instance, &cakmi.Correlationid, &cakmi.Flags)
	if err != nil {
		return nil, err
	}

	return &cakmi, nil
}

// CuptiActivityKindMetricInstancesByCorrelationid retrieves a row from 'CUPTI_ACTIVITY_KIND_METRIC_INSTANCE' as a CuptiActivityKindMetricInstance.
//
// Generated from index 'INDEX_CUPTI_ACTIVITY_KIND_METRIC_INSTANCE'.
func CuptiActivityKindMetricInstancesByCorrelationid(db XODB, correlationid int) ([]*CuptiActivityKindMetricInstance, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`_id_, id, value, instance, correlationId, flags ` +
		`FROM CUPTI_ACTIVITY_KIND_METRIC_INSTANCE ` +
		`WHERE correlationId = ?`

	// run query
	XOLog(sqlstr, correlationid)
	q, err := db.Query(sqlstr, correlationid)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*CuptiActivityKindMetricInstance{}
	for q.Next() {
		cakmi := CuptiActivityKindMetricInstance{
			_exists: true,
		}

		// scan
		err = q.Scan(&cakmi.ID, &cakmi.ID, &cakmi.Value, &cakmi.Instance, &cakmi.Correlationid, &cakmi.Flags)
		if err != nil {
			return nil, err
		}

		res = append(res, &cakmi)
	}

	return res, nil
}
