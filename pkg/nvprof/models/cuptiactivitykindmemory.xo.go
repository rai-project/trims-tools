// Package models contains the types for schema ''.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
)

// CuptiActivityKindMemory represents a row from 'CUPTI_ACTIVITY_KIND_MEMORY'.
type CuptiActivityKindMemory struct {
	ID         sql.NullInt64 `json:"_id_"`       // _id_
	Memorykind int           `json:"memoryKind"` // memoryKind
	Address    int           `json:"address"`    // address
	Bytes      int           `json:"bytes"`      // bytes
	Start      int           `json:"start"`      // start
	End        int           `json:"end"`        // end
	Allocpc    int           `json:"allocPC"`    // allocPC
	Freepc     int           `json:"freePC"`     // freePC
	Processid  int           `json:"processId"`  // processId
	Deviceid   int           `json:"deviceId"`   // deviceId
	Contextid  int           `json:"contextId"`  // contextId
	Name       int           `json:"name"`       // name

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the CuptiActivityKindMemory exists in the database.
func (cakm *CuptiActivityKindMemory) Exists() bool {
	return cakm._exists
}

// Deleted provides information if the CuptiActivityKindMemory has been deleted from the database.
func (cakm *CuptiActivityKindMemory) Deleted() bool {
	return cakm._deleted
}

// Insert inserts the CuptiActivityKindMemory to the database.
func (cakm *CuptiActivityKindMemory) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if cakm._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO CUPTI_ACTIVITY_KIND_MEMORY (` +
		`memoryKind, address, bytes, start, end, allocPC, freePC, processId, deviceId, contextId, name` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, cakm.Memorykind, cakm.Address, cakm.Bytes, cakm.Start, cakm.End, cakm.Allocpc, cakm.Freepc, cakm.Processid, cakm.Deviceid, cakm.Contextid, cakm.Name)
	res, err := db.Exec(sqlstr, cakm.Memorykind, cakm.Address, cakm.Bytes, cakm.Start, cakm.End, cakm.Allocpc, cakm.Freepc, cakm.Processid, cakm.Deviceid, cakm.Contextid, cakm.Name)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	cakm.ID = sql.NullInt64(id)
	cakm._exists = true

	return nil
}

// Update updates the CuptiActivityKindMemory in the database.
func (cakm *CuptiActivityKindMemory) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !cakm._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if cakm._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE CUPTI_ACTIVITY_KIND_MEMORY SET ` +
		`memoryKind = ?, address = ?, bytes = ?, start = ?, end = ?, allocPC = ?, freePC = ?, processId = ?, deviceId = ?, contextId = ?, name = ?` +
		` WHERE _id_ = ?`

	// run query
	XOLog(sqlstr, cakm.Memorykind, cakm.Address, cakm.Bytes, cakm.Start, cakm.End, cakm.Allocpc, cakm.Freepc, cakm.Processid, cakm.Deviceid, cakm.Contextid, cakm.Name, cakm.ID)
	_, err = db.Exec(sqlstr, cakm.Memorykind, cakm.Address, cakm.Bytes, cakm.Start, cakm.End, cakm.Allocpc, cakm.Freepc, cakm.Processid, cakm.Deviceid, cakm.Contextid, cakm.Name, cakm.ID)
	return err
}

// Save saves the CuptiActivityKindMemory to the database.
func (cakm *CuptiActivityKindMemory) Save(db XODB) error {
	if cakm.Exists() {
		return cakm.Update(db)
	}

	return cakm.Insert(db)
}

// Delete deletes the CuptiActivityKindMemory from the database.
func (cakm *CuptiActivityKindMemory) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !cakm._exists {
		return nil
	}

	// if deleted, bail
	if cakm._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM CUPTI_ACTIVITY_KIND_MEMORY WHERE _id_ = ?`

	// run query
	XOLog(sqlstr, cakm.ID)
	_, err = db.Exec(sqlstr, cakm.ID)
	if err != nil {
		return err
	}

	// set deleted
	cakm._deleted = true

	return nil
}

// CuptiActivityKindMemoryByID retrieves a row from 'CUPTI_ACTIVITY_KIND_MEMORY' as a CuptiActivityKindMemory.
//
// Generated from index 'CUPTI_ACTIVITY_KIND_MEMORY__id__pkey'.
func CuptiActivityKindMemoryByID(db XODB, id sql.NullInt64) (*CuptiActivityKindMemory, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`_id_, memoryKind, address, bytes, start, end, allocPC, freePC, processId, deviceId, contextId, name ` +
		`FROM CUPTI_ACTIVITY_KIND_MEMORY ` +
		`WHERE _id_ = ?`

	// run query
	XOLog(sqlstr, id)
	cakm := CuptiActivityKindMemory{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&cakm.ID, &cakm.Memorykind, &cakm.Address, &cakm.Bytes, &cakm.Start, &cakm.End, &cakm.Allocpc, &cakm.Freepc, &cakm.Processid, &cakm.Deviceid, &cakm.Contextid, &cakm.Name)
	if err != nil {
		return nil, err
	}

	return &cakm, nil
}

// CuptiActivityKindMemoriesByStart retrieves a row from 'CUPTI_ACTIVITY_KIND_MEMORY' as a CuptiActivityKindMemory.
//
// Generated from index 'INDEX_CUPTI_ACTIVITY_KIND_MEMORY'.
func CuptiActivityKindMemoriesByStart(db XODB, start int) ([]*CuptiActivityKindMemory, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`_id_, memoryKind, address, bytes, start, end, allocPC, freePC, processId, deviceId, contextId, name ` +
		`FROM CUPTI_ACTIVITY_KIND_MEMORY ` +
		`WHERE start = ?`

	// run query
	XOLog(sqlstr, start)
	q, err := db.Query(sqlstr, start)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*CuptiActivityKindMemory{}
	for q.Next() {
		cakm := CuptiActivityKindMemory{
			_exists: true,
		}

		// scan
		err = q.Scan(&cakm.ID, &cakm.Memorykind, &cakm.Address, &cakm.Bytes, &cakm.Start, &cakm.End, &cakm.Allocpc, &cakm.Freepc, &cakm.Processid, &cakm.Deviceid, &cakm.Contextid, &cakm.Name)
		if err != nil {
			return nil, err
		}

		res = append(res, &cakm)
	}

	return res, nil
}
