// Package models contains the types for schema ''.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
)

// CuptiActivityKindModule represents a row from 'CUPTI_ACTIVITY_KIND_MODULE'.
type CuptiActivityKindModule struct {
	ID        sql.NullInt64 `json:"_id_"`      // _id_
	Contextid int           `json:"contextId"` // contextId
	ID        int           `json:"id"`        // id
	Cubinsize int           `json:"cubinSize"` // cubinSize
	Cubin     []byte        `json:"cubin"`     // cubin

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the CuptiActivityKindModule exists in the database.
func (cakm *CuptiActivityKindModule) Exists() bool {
	return cakm._exists
}

// Deleted provides information if the CuptiActivityKindModule has been deleted from the database.
func (cakm *CuptiActivityKindModule) Deleted() bool {
	return cakm._deleted
}

// Insert inserts the CuptiActivityKindModule to the database.
func (cakm *CuptiActivityKindModule) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if cakm._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO CUPTI_ACTIVITY_KIND_MODULE (` +
		`contextId, cubinSize, cubin` +
		`) VALUES (` +
		`?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, cakm.Contextid, cakm.Cubinsize, cakm.Cubin)
	res, err := db.Exec(sqlstr, cakm.Contextid, cakm.Cubinsize, cakm.Cubin)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	cakm.ID = sql.NullInt64(id)
	cakm._exists = true

	return nil
}

// Update updates the CuptiActivityKindModule in the database.
func (cakm *CuptiActivityKindModule) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !cakm._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if cakm._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE CUPTI_ACTIVITY_KIND_MODULE SET ` +
		`contextId = ?, cubinSize = ?, cubin = ?` +
		` WHERE _id_ = ?`

	// run query
	XOLog(sqlstr, cakm.Contextid, cakm.Cubinsize, cakm.Cubin, cakm.ID)
	_, err = db.Exec(sqlstr, cakm.Contextid, cakm.Cubinsize, cakm.Cubin, cakm.ID)
	return err
}

// Save saves the CuptiActivityKindModule to the database.
func (cakm *CuptiActivityKindModule) Save(db XODB) error {
	if cakm.Exists() {
		return cakm.Update(db)
	}

	return cakm.Insert(db)
}

// Delete deletes the CuptiActivityKindModule from the database.
func (cakm *CuptiActivityKindModule) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !cakm._exists {
		return nil
	}

	// if deleted, bail
	if cakm._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM CUPTI_ACTIVITY_KIND_MODULE WHERE _id_ = ?`

	// run query
	XOLog(sqlstr, cakm.ID)
	_, err = db.Exec(sqlstr, cakm.ID)
	if err != nil {
		return err
	}

	// set deleted
	cakm._deleted = true

	return nil
}

// CuptiActivityKindModuleByID retrieves a row from 'CUPTI_ACTIVITY_KIND_MODULE' as a CuptiActivityKindModule.
//
// Generated from index 'CUPTI_ACTIVITY_KIND_MODULE__id__pkey'.
func CuptiActivityKindModuleByID(db XODB, id sql.NullInt64) (*CuptiActivityKindModule, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`_id_, contextId, id, cubinSize, cubin ` +
		`FROM CUPTI_ACTIVITY_KIND_MODULE ` +
		`WHERE _id_ = ?`

	// run query
	XOLog(sqlstr, id)
	cakm := CuptiActivityKindModule{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&cakm.ID, &cakm.Contextid, &cakm.ID, &cakm.Cubinsize, &cakm.Cubin)
	if err != nil {
		return nil, err
	}

	return &cakm, nil
}
