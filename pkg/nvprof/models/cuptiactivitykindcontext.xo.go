// Package models contains the types for schema ''.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
)

// CuptiActivityKindContext represents a row from 'CUPTI_ACTIVITY_KIND_CONTEXT'.
type CuptiActivityKindContext struct {
	ID             sql.NullInt64 `json:"_id_"`           // _id_
	Contextid      int           `json:"contextId"`      // contextId
	Deviceid       int           `json:"deviceId"`       // deviceId
	Computeapikind int           `json:"computeApiKind"` // computeApiKind
	Nullstreamid   int           `json:"nullStreamId"`   // nullStreamId

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the CuptiActivityKindContext exists in the database.
func (cakc *CuptiActivityKindContext) Exists() bool {
	return cakc._exists
}

// Deleted provides information if the CuptiActivityKindContext has been deleted from the database.
func (cakc *CuptiActivityKindContext) Deleted() bool {
	return cakc._deleted
}

// Insert inserts the CuptiActivityKindContext to the database.
func (cakc *CuptiActivityKindContext) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if cakc._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO CUPTI_ACTIVITY_KIND_CONTEXT (` +
		`contextId, deviceId, computeApiKind, nullStreamId` +
		`) VALUES (` +
		`?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, cakc.Contextid, cakc.Deviceid, cakc.Computeapikind, cakc.Nullstreamid)
	res, err := db.Exec(sqlstr, cakc.Contextid, cakc.Deviceid, cakc.Computeapikind, cakc.Nullstreamid)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	cakc.ID = sql.NullInt64(id)
	cakc._exists = true

	return nil
}

// Update updates the CuptiActivityKindContext in the database.
func (cakc *CuptiActivityKindContext) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !cakc._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if cakc._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE CUPTI_ACTIVITY_KIND_CONTEXT SET ` +
		`contextId = ?, deviceId = ?, computeApiKind = ?, nullStreamId = ?` +
		` WHERE _id_ = ?`

	// run query
	XOLog(sqlstr, cakc.Contextid, cakc.Deviceid, cakc.Computeapikind, cakc.Nullstreamid, cakc.ID)
	_, err = db.Exec(sqlstr, cakc.Contextid, cakc.Deviceid, cakc.Computeapikind, cakc.Nullstreamid, cakc.ID)
	return err
}

// Save saves the CuptiActivityKindContext to the database.
func (cakc *CuptiActivityKindContext) Save(db XODB) error {
	if cakc.Exists() {
		return cakc.Update(db)
	}

	return cakc.Insert(db)
}

// Delete deletes the CuptiActivityKindContext from the database.
func (cakc *CuptiActivityKindContext) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !cakc._exists {
		return nil
	}

	// if deleted, bail
	if cakc._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM CUPTI_ACTIVITY_KIND_CONTEXT WHERE _id_ = ?`

	// run query
	XOLog(sqlstr, cakc.ID)
	_, err = db.Exec(sqlstr, cakc.ID)
	if err != nil {
		return err
	}

	// set deleted
	cakc._deleted = true

	return nil
}

// CuptiActivityKindContextByID retrieves a row from 'CUPTI_ACTIVITY_KIND_CONTEXT' as a CuptiActivityKindContext.
//
// Generated from index 'CUPTI_ACTIVITY_KIND_CONTEXT__id__pkey'.
func CuptiActivityKindContextByID(db XODB, id sql.NullInt64) (*CuptiActivityKindContext, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`_id_, contextId, deviceId, computeApiKind, nullStreamId ` +
		`FROM CUPTI_ACTIVITY_KIND_CONTEXT ` +
		`WHERE _id_ = ?`

	// run query
	XOLog(sqlstr, id)
	cakc := CuptiActivityKindContext{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&cakc.ID, &cakc.Contextid, &cakc.Deviceid, &cakc.Computeapikind, &cakc.Nullstreamid)
	if err != nil {
		return nil, err
	}

	return &cakc, nil
}
