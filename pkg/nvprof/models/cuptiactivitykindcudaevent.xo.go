// Package models contains the types for schema ''.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
)

// CuptiActivityKindCudaEvent represents a row from 'CUPTI_ACTIVITY_KIND_CUDA_EVENT'.
type CuptiActivityKindCudaEvent struct {
	ID            sql.NullInt64 `json:"_id_"`          // _id_
	Correlationid int           `json:"correlationId"` // correlationId
	Contextid     int           `json:"contextId"`     // contextId
	Streamid      int           `json:"streamId"`      // streamId
	Eventid       int           `json:"eventId"`       // eventId

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the CuptiActivityKindCudaEvent exists in the database.
func (cakce *CuptiActivityKindCudaEvent) Exists() bool {
	return cakce._exists
}

// Deleted provides information if the CuptiActivityKindCudaEvent has been deleted from the database.
func (cakce *CuptiActivityKindCudaEvent) Deleted() bool {
	return cakce._deleted
}

// Insert inserts the CuptiActivityKindCudaEvent to the database.
func (cakce *CuptiActivityKindCudaEvent) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if cakce._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO CUPTI_ACTIVITY_KIND_CUDA_EVENT (` +
		`correlationId, contextId, streamId, eventId` +
		`) VALUES (` +
		`?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, cakce.Correlationid, cakce.Contextid, cakce.Streamid, cakce.Eventid)
	res, err := db.Exec(sqlstr, cakce.Correlationid, cakce.Contextid, cakce.Streamid, cakce.Eventid)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	cakce.ID = sql.NullInt64(id)
	cakce._exists = true

	return nil
}

// Update updates the CuptiActivityKindCudaEvent in the database.
func (cakce *CuptiActivityKindCudaEvent) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !cakce._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if cakce._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE CUPTI_ACTIVITY_KIND_CUDA_EVENT SET ` +
		`correlationId = ?, contextId = ?, streamId = ?, eventId = ?` +
		` WHERE _id_ = ?`

	// run query
	XOLog(sqlstr, cakce.Correlationid, cakce.Contextid, cakce.Streamid, cakce.Eventid, cakce.ID)
	_, err = db.Exec(sqlstr, cakce.Correlationid, cakce.Contextid, cakce.Streamid, cakce.Eventid, cakce.ID)
	return err
}

// Save saves the CuptiActivityKindCudaEvent to the database.
func (cakce *CuptiActivityKindCudaEvent) Save(db XODB) error {
	if cakce.Exists() {
		return cakce.Update(db)
	}

	return cakce.Insert(db)
}

// Delete deletes the CuptiActivityKindCudaEvent from the database.
func (cakce *CuptiActivityKindCudaEvent) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !cakce._exists {
		return nil
	}

	// if deleted, bail
	if cakce._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM CUPTI_ACTIVITY_KIND_CUDA_EVENT WHERE _id_ = ?`

	// run query
	XOLog(sqlstr, cakce.ID)
	_, err = db.Exec(sqlstr, cakce.ID)
	if err != nil {
		return err
	}

	// set deleted
	cakce._deleted = true

	return nil
}

// CuptiActivityKindCudaEventByID retrieves a row from 'CUPTI_ACTIVITY_KIND_CUDA_EVENT' as a CuptiActivityKindCudaEvent.
//
// Generated from index 'CUPTI_ACTIVITY_KIND_CUDA_EVENT__id__pkey'.
func CuptiActivityKindCudaEventByID(db XODB, id sql.NullInt64) (*CuptiActivityKindCudaEvent, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`_id_, correlationId, contextId, streamId, eventId ` +
		`FROM CUPTI_ACTIVITY_KIND_CUDA_EVENT ` +
		`WHERE _id_ = ?`

	// run query
	XOLog(sqlstr, id)
	cakce := CuptiActivityKindCudaEvent{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&cakce.ID, &cakce.Correlationid, &cakce.Contextid, &cakce.Streamid, &cakce.Eventid)
	if err != nil {
		return nil, err
	}

	return &cakce, nil
}

// CuptiActivityKindCudaEventsByCorrelationid retrieves a row from 'CUPTI_ACTIVITY_KIND_CUDA_EVENT' as a CuptiActivityKindCudaEvent.
//
// Generated from index 'INDEX_CUPTI_ACTIVITY_KIND_CUDA_EVENT'.
func CuptiActivityKindCudaEventsByCorrelationid(db XODB, correlationid int) ([]*CuptiActivityKindCudaEvent, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`_id_, correlationId, contextId, streamId, eventId ` +
		`FROM CUPTI_ACTIVITY_KIND_CUDA_EVENT ` +
		`WHERE correlationId = ?`

	// run query
	XOLog(sqlstr, correlationid)
	q, err := db.Query(sqlstr, correlationid)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*CuptiActivityKindCudaEvent{}
	for q.Next() {
		cakce := CuptiActivityKindCudaEvent{
			_exists: true,
		}

		// scan
		err = q.Scan(&cakce.ID, &cakce.Correlationid, &cakce.Contextid, &cakce.Streamid, &cakce.Eventid)
		if err != nil {
			return nil, err
		}

		res = append(res, &cakce)
	}

	return res, nil
}
