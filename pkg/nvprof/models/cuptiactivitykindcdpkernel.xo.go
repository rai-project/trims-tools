// Package models contains the types for schema ''.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
)

// CuptiActivityKindCdpKernel represents a row from 'CUPTI_ACTIVITY_KIND_CDP_KERNEL'.
type CuptiActivityKindCdpKernel struct {
	ID                   sql.NullInt64 `json:"_id_"`                 // _id_
	Cacheconfig          []byte        `json:"cacheConfig"`          // cacheConfig
	Sharedmemoryconfig   int           `json:"sharedMemoryConfig"`   // sharedMemoryConfig
	Registersperthread   int           `json:"registersPerThread"`   // registersPerThread
	Start                int           `json:"start"`                // start
	End                  int           `json:"end"`                  // end
	Deviceid             int           `json:"deviceId"`             // deviceId
	Contextid            int           `json:"contextId"`            // contextId
	Streamid             int           `json:"streamId"`             // streamId
	Gridx                int           `json:"gridX"`                // gridX
	Gridy                int           `json:"gridY"`                // gridY
	Gridz                int           `json:"gridZ"`                // gridZ
	Blockx               int           `json:"blockX"`               // blockX
	Blocky               int           `json:"blockY"`               // blockY
	Blockz               int           `json:"blockZ"`               // blockZ
	Staticsharedmemory   int           `json:"staticSharedMemory"`   // staticSharedMemory
	Dynamicsharedmemory  int           `json:"dynamicSharedMemory"`  // dynamicSharedMemory
	Localmemoryperthread int           `json:"localMemoryPerThread"` // localMemoryPerThread
	Localmemorytotal     int           `json:"localMemoryTotal"`     // localMemoryTotal
	Correlationid        int           `json:"correlationId"`        // correlationId
	Gridid               int           `json:"gridId"`               // gridId
	Parentgridid         int           `json:"parentGridId"`         // parentGridId
	Queued               int           `json:"queued"`               // queued
	Submitted            int           `json:"submitted"`            // submitted
	Completed            int           `json:"completed"`            // completed
	Parentblockx         int           `json:"parentBlockX"`         // parentBlockX
	Parentblocky         int           `json:"parentBlockY"`         // parentBlockY
	Parentblockz         int           `json:"parentBlockZ"`         // parentBlockZ
	Name                 int           `json:"name"`                 // name

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the CuptiActivityKindCdpKernel exists in the database.
func (cakck *CuptiActivityKindCdpKernel) Exists() bool {
	return cakck._exists
}

// Deleted provides information if the CuptiActivityKindCdpKernel has been deleted from the database.
func (cakck *CuptiActivityKindCdpKernel) Deleted() bool {
	return cakck._deleted
}

// Insert inserts the CuptiActivityKindCdpKernel to the database.
func (cakck *CuptiActivityKindCdpKernel) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if cakck._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO CUPTI_ACTIVITY_KIND_CDP_KERNEL (` +
		`cacheConfig, sharedMemoryConfig, registersPerThread, start, end, deviceId, contextId, streamId, gridX, gridY, gridZ, blockX, blockY, blockZ, staticSharedMemory, dynamicSharedMemory, localMemoryPerThread, localMemoryTotal, correlationId, gridId, parentGridId, queued, submitted, completed, parentBlockX, parentBlockY, parentBlockZ, name` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, cakck.Cacheconfig, cakck.Sharedmemoryconfig, cakck.Registersperthread, cakck.Start, cakck.End, cakck.Deviceid, cakck.Contextid, cakck.Streamid, cakck.Gridx, cakck.Gridy, cakck.Gridz, cakck.Blockx, cakck.Blocky, cakck.Blockz, cakck.Staticsharedmemory, cakck.Dynamicsharedmemory, cakck.Localmemoryperthread, cakck.Localmemorytotal, cakck.Correlationid, cakck.Gridid, cakck.Parentgridid, cakck.Queued, cakck.Submitted, cakck.Completed, cakck.Parentblockx, cakck.Parentblocky, cakck.Parentblockz, cakck.Name)
	res, err := db.Exec(sqlstr, cakck.Cacheconfig, cakck.Sharedmemoryconfig, cakck.Registersperthread, cakck.Start, cakck.End, cakck.Deviceid, cakck.Contextid, cakck.Streamid, cakck.Gridx, cakck.Gridy, cakck.Gridz, cakck.Blockx, cakck.Blocky, cakck.Blockz, cakck.Staticsharedmemory, cakck.Dynamicsharedmemory, cakck.Localmemoryperthread, cakck.Localmemorytotal, cakck.Correlationid, cakck.Gridid, cakck.Parentgridid, cakck.Queued, cakck.Submitted, cakck.Completed, cakck.Parentblockx, cakck.Parentblocky, cakck.Parentblockz, cakck.Name)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	cakck.ID = sql.NullInt64(id)
	cakck._exists = true

	return nil
}

// Update updates the CuptiActivityKindCdpKernel in the database.
func (cakck *CuptiActivityKindCdpKernel) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !cakck._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if cakck._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE CUPTI_ACTIVITY_KIND_CDP_KERNEL SET ` +
		`cacheConfig = ?, sharedMemoryConfig = ?, registersPerThread = ?, start = ?, end = ?, deviceId = ?, contextId = ?, streamId = ?, gridX = ?, gridY = ?, gridZ = ?, blockX = ?, blockY = ?, blockZ = ?, staticSharedMemory = ?, dynamicSharedMemory = ?, localMemoryPerThread = ?, localMemoryTotal = ?, correlationId = ?, gridId = ?, parentGridId = ?, queued = ?, submitted = ?, completed = ?, parentBlockX = ?, parentBlockY = ?, parentBlockZ = ?, name = ?` +
		` WHERE _id_ = ?`

	// run query
	XOLog(sqlstr, cakck.Cacheconfig, cakck.Sharedmemoryconfig, cakck.Registersperthread, cakck.Start, cakck.End, cakck.Deviceid, cakck.Contextid, cakck.Streamid, cakck.Gridx, cakck.Gridy, cakck.Gridz, cakck.Blockx, cakck.Blocky, cakck.Blockz, cakck.Staticsharedmemory, cakck.Dynamicsharedmemory, cakck.Localmemoryperthread, cakck.Localmemorytotal, cakck.Correlationid, cakck.Gridid, cakck.Parentgridid, cakck.Queued, cakck.Submitted, cakck.Completed, cakck.Parentblockx, cakck.Parentblocky, cakck.Parentblockz, cakck.Name, cakck.ID)
	_, err = db.Exec(sqlstr, cakck.Cacheconfig, cakck.Sharedmemoryconfig, cakck.Registersperthread, cakck.Start, cakck.End, cakck.Deviceid, cakck.Contextid, cakck.Streamid, cakck.Gridx, cakck.Gridy, cakck.Gridz, cakck.Blockx, cakck.Blocky, cakck.Blockz, cakck.Staticsharedmemory, cakck.Dynamicsharedmemory, cakck.Localmemoryperthread, cakck.Localmemorytotal, cakck.Correlationid, cakck.Gridid, cakck.Parentgridid, cakck.Queued, cakck.Submitted, cakck.Completed, cakck.Parentblockx, cakck.Parentblocky, cakck.Parentblockz, cakck.Name, cakck.ID)
	return err
}

// Save saves the CuptiActivityKindCdpKernel to the database.
func (cakck *CuptiActivityKindCdpKernel) Save(db XODB) error {
	if cakck.Exists() {
		return cakck.Update(db)
	}

	return cakck.Insert(db)
}

// Delete deletes the CuptiActivityKindCdpKernel from the database.
func (cakck *CuptiActivityKindCdpKernel) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !cakck._exists {
		return nil
	}

	// if deleted, bail
	if cakck._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM CUPTI_ACTIVITY_KIND_CDP_KERNEL WHERE _id_ = ?`

	// run query
	XOLog(sqlstr, cakck.ID)
	_, err = db.Exec(sqlstr, cakck.ID)
	if err != nil {
		return err
	}

	// set deleted
	cakck._deleted = true

	return nil
}

// CuptiActivityKindCdpKernelByID retrieves a row from 'CUPTI_ACTIVITY_KIND_CDP_KERNEL' as a CuptiActivityKindCdpKernel.
//
// Generated from index 'CUPTI_ACTIVITY_KIND_CDP_KERNEL__id__pkey'.
func CuptiActivityKindCdpKernelByID(db XODB, id sql.NullInt64) (*CuptiActivityKindCdpKernel, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`_id_, cacheConfig, sharedMemoryConfig, registersPerThread, start, end, deviceId, contextId, streamId, gridX, gridY, gridZ, blockX, blockY, blockZ, staticSharedMemory, dynamicSharedMemory, localMemoryPerThread, localMemoryTotal, correlationId, gridId, parentGridId, queued, submitted, completed, parentBlockX, parentBlockY, parentBlockZ, name ` +
		`FROM CUPTI_ACTIVITY_KIND_CDP_KERNEL ` +
		`WHERE _id_ = ?`

	// run query
	XOLog(sqlstr, id)
	cakck := CuptiActivityKindCdpKernel{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&cakck.ID, &cakck.Cacheconfig, &cakck.Sharedmemoryconfig, &cakck.Registersperthread, &cakck.Start, &cakck.End, &cakck.Deviceid, &cakck.Contextid, &cakck.Streamid, &cakck.Gridx, &cakck.Gridy, &cakck.Gridz, &cakck.Blockx, &cakck.Blocky, &cakck.Blockz, &cakck.Staticsharedmemory, &cakck.Dynamicsharedmemory, &cakck.Localmemoryperthread, &cakck.Localmemorytotal, &cakck.Correlationid, &cakck.Gridid, &cakck.Parentgridid, &cakck.Queued, &cakck.Submitted, &cakck.Completed, &cakck.Parentblockx, &cakck.Parentblocky, &cakck.Parentblockz, &cakck.Name)
	if err != nil {
		return nil, err
	}

	return &cakck, nil
}

// CuptiActivityKindCdpKernelsByCorrelationid retrieves a row from 'CUPTI_ACTIVITY_KIND_CDP_KERNEL' as a CuptiActivityKindCdpKernel.
//
// Generated from index 'INDEX_CUPTI_ACTIVITY_KIND_CDP_KERNEL'.
func CuptiActivityKindCdpKernelsByCorrelationid(db XODB, correlationid int) ([]*CuptiActivityKindCdpKernel, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`_id_, cacheConfig, sharedMemoryConfig, registersPerThread, start, end, deviceId, contextId, streamId, gridX, gridY, gridZ, blockX, blockY, blockZ, staticSharedMemory, dynamicSharedMemory, localMemoryPerThread, localMemoryTotal, correlationId, gridId, parentGridId, queued, submitted, completed, parentBlockX, parentBlockY, parentBlockZ, name ` +
		`FROM CUPTI_ACTIVITY_KIND_CDP_KERNEL ` +
		`WHERE correlationId = ?`

	// run query
	XOLog(sqlstr, correlationid)
	q, err := db.Query(sqlstr, correlationid)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*CuptiActivityKindCdpKernel{}
	for q.Next() {
		cakck := CuptiActivityKindCdpKernel{
			_exists: true,
		}

		// scan
		err = q.Scan(&cakck.ID, &cakck.Cacheconfig, &cakck.Sharedmemoryconfig, &cakck.Registersperthread, &cakck.Start, &cakck.End, &cakck.Deviceid, &cakck.Contextid, &cakck.Streamid, &cakck.Gridx, &cakck.Gridy, &cakck.Gridz, &cakck.Blockx, &cakck.Blocky, &cakck.Blockz, &cakck.Staticsharedmemory, &cakck.Dynamicsharedmemory, &cakck.Localmemoryperthread, &cakck.Localmemorytotal, &cakck.Correlationid, &cakck.Gridid, &cakck.Parentgridid, &cakck.Queued, &cakck.Submitted, &cakck.Completed, &cakck.Parentblockx, &cakck.Parentblocky, &cakck.Parentblockz, &cakck.Name)
		if err != nil {
			return nil, err
		}

		res = append(res, &cakck)
	}

	return res, nil
}
