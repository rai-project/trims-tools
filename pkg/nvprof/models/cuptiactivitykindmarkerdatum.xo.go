// Package models contains the types for schema ''.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
)

// CuptiActivityKindMarkerDatum represents a row from 'CUPTI_ACTIVITY_KIND_MARKER_DATA'.
type CuptiActivityKindMarkerDatum struct {
	ID          sql.NullInt64 `json:"_id_"`        // _id_
	Flags       int           `json:"flags"`       // flags
	ID          int           `json:"id"`          // id
	Payloadkind int           `json:"payloadKind"` // payloadKind
	Payload     []byte        `json:"payload"`     // payload
	Color       int           `json:"color"`       // color
	Category    int           `json:"category"`    // category

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the CuptiActivityKindMarkerDatum exists in the database.
func (cakmd *CuptiActivityKindMarkerDatum) Exists() bool {
	return cakmd._exists
}

// Deleted provides information if the CuptiActivityKindMarkerDatum has been deleted from the database.
func (cakmd *CuptiActivityKindMarkerDatum) Deleted() bool {
	return cakmd._deleted
}

// Insert inserts the CuptiActivityKindMarkerDatum to the database.
func (cakmd *CuptiActivityKindMarkerDatum) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if cakmd._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO CUPTI_ACTIVITY_KIND_MARKER_DATA (` +
		`flags, payloadKind, payload, color, category` +
		`) VALUES (` +
		`?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, cakmd.Flags, cakmd.Payloadkind, cakmd.Payload, cakmd.Color, cakmd.Category)
	res, err := db.Exec(sqlstr, cakmd.Flags, cakmd.Payloadkind, cakmd.Payload, cakmd.Color, cakmd.Category)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	cakmd.ID = sql.NullInt64(id)
	cakmd._exists = true

	return nil
}

// Update updates the CuptiActivityKindMarkerDatum in the database.
func (cakmd *CuptiActivityKindMarkerDatum) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !cakmd._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if cakmd._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE CUPTI_ACTIVITY_KIND_MARKER_DATA SET ` +
		`flags = ?, payloadKind = ?, payload = ?, color = ?, category = ?` +
		` WHERE _id_ = ?`

	// run query
	XOLog(sqlstr, cakmd.Flags, cakmd.Payloadkind, cakmd.Payload, cakmd.Color, cakmd.Category, cakmd.ID)
	_, err = db.Exec(sqlstr, cakmd.Flags, cakmd.Payloadkind, cakmd.Payload, cakmd.Color, cakmd.Category, cakmd.ID)
	return err
}

// Save saves the CuptiActivityKindMarkerDatum to the database.
func (cakmd *CuptiActivityKindMarkerDatum) Save(db XODB) error {
	if cakmd.Exists() {
		return cakmd.Update(db)
	}

	return cakmd.Insert(db)
}

// Delete deletes the CuptiActivityKindMarkerDatum from the database.
func (cakmd *CuptiActivityKindMarkerDatum) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !cakmd._exists {
		return nil
	}

	// if deleted, bail
	if cakmd._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM CUPTI_ACTIVITY_KIND_MARKER_DATA WHERE _id_ = ?`

	// run query
	XOLog(sqlstr, cakmd.ID)
	_, err = db.Exec(sqlstr, cakmd.ID)
	if err != nil {
		return err
	}

	// set deleted
	cakmd._deleted = true

	return nil
}

// CuptiActivityKindMarkerDatumByID retrieves a row from 'CUPTI_ACTIVITY_KIND_MARKER_DATA' as a CuptiActivityKindMarkerDatum.
//
// Generated from index 'CUPTI_ACTIVITY_KIND_MARKER_DATA__id__pkey'.
func CuptiActivityKindMarkerDatumByID(db XODB, id sql.NullInt64) (*CuptiActivityKindMarkerDatum, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`_id_, flags, id, payloadKind, payload, color, category ` +
		`FROM CUPTI_ACTIVITY_KIND_MARKER_DATA ` +
		`WHERE _id_ = ?`

	// run query
	XOLog(sqlstr, id)
	cakmd := CuptiActivityKindMarkerDatum{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&cakmd.ID, &cakmd.Flags, &cakmd.ID, &cakmd.Payloadkind, &cakmd.Payload, &cakmd.Color, &cakmd.Category)
	if err != nil {
		return nil, err
	}

	return &cakmd, nil
}
