// Package models contains the types for schema ''.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
)

// CuptiActivityKindPreemption represents a row from 'CUPTI_ACTIVITY_KIND_PREEMPTION'.
type CuptiActivityKindPreemption struct {
	ID             sql.NullInt64 `json:"_id_"`           // _id_
	Preemptionkind int           `json:"preemptionKind"` // preemptionKind
	Timestamp      int           `json:"timestamp"`      // timestamp
	Gridid         int           `json:"gridId"`         // gridId
	Blockx         int           `json:"blockX"`         // blockX
	Blocky         int           `json:"blockY"`         // blockY
	Blockz         int           `json:"blockZ"`         // blockZ

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the CuptiActivityKindPreemption exists in the database.
func (cakp *CuptiActivityKindPreemption) Exists() bool {
	return cakp._exists
}

// Deleted provides information if the CuptiActivityKindPreemption has been deleted from the database.
func (cakp *CuptiActivityKindPreemption) Deleted() bool {
	return cakp._deleted
}

// Insert inserts the CuptiActivityKindPreemption to the database.
func (cakp *CuptiActivityKindPreemption) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if cakp._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO CUPTI_ACTIVITY_KIND_PREEMPTION (` +
		`preemptionKind, timestamp, gridId, blockX, blockY, blockZ` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, cakp.Preemptionkind, cakp.Timestamp, cakp.Gridid, cakp.Blockx, cakp.Blocky, cakp.Blockz)
	res, err := db.Exec(sqlstr, cakp.Preemptionkind, cakp.Timestamp, cakp.Gridid, cakp.Blockx, cakp.Blocky, cakp.Blockz)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	cakp.ID = sql.NullInt64(id)
	cakp._exists = true

	return nil
}

// Update updates the CuptiActivityKindPreemption in the database.
func (cakp *CuptiActivityKindPreemption) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !cakp._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if cakp._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE CUPTI_ACTIVITY_KIND_PREEMPTION SET ` +
		`preemptionKind = ?, timestamp = ?, gridId = ?, blockX = ?, blockY = ?, blockZ = ?` +
		` WHERE _id_ = ?`

	// run query
	XOLog(sqlstr, cakp.Preemptionkind, cakp.Timestamp, cakp.Gridid, cakp.Blockx, cakp.Blocky, cakp.Blockz, cakp.ID)
	_, err = db.Exec(sqlstr, cakp.Preemptionkind, cakp.Timestamp, cakp.Gridid, cakp.Blockx, cakp.Blocky, cakp.Blockz, cakp.ID)
	return err
}

// Save saves the CuptiActivityKindPreemption to the database.
func (cakp *CuptiActivityKindPreemption) Save(db XODB) error {
	if cakp.Exists() {
		return cakp.Update(db)
	}

	return cakp.Insert(db)
}

// Delete deletes the CuptiActivityKindPreemption from the database.
func (cakp *CuptiActivityKindPreemption) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !cakp._exists {
		return nil
	}

	// if deleted, bail
	if cakp._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM CUPTI_ACTIVITY_KIND_PREEMPTION WHERE _id_ = ?`

	// run query
	XOLog(sqlstr, cakp.ID)
	_, err = db.Exec(sqlstr, cakp.ID)
	if err != nil {
		return err
	}

	// set deleted
	cakp._deleted = true

	return nil
}

// CuptiActivityKindPreemptionByID retrieves a row from 'CUPTI_ACTIVITY_KIND_PREEMPTION' as a CuptiActivityKindPreemption.
//
// Generated from index 'CUPTI_ACTIVITY_KIND_PREEMPTION__id__pkey'.
func CuptiActivityKindPreemptionByID(db XODB, id sql.NullInt64) (*CuptiActivityKindPreemption, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`_id_, preemptionKind, timestamp, gridId, blockX, blockY, blockZ ` +
		`FROM CUPTI_ACTIVITY_KIND_PREEMPTION ` +
		`WHERE _id_ = ?`

	// run query
	XOLog(sqlstr, id)
	cakp := CuptiActivityKindPreemption{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&cakp.ID, &cakp.Preemptionkind, &cakp.Timestamp, &cakp.Gridid, &cakp.Blockx, &cakp.Blocky, &cakp.Blockz)
	if err != nil {
		return nil, err
	}

	return &cakp, nil
}

// CuptiActivityKindPreemptionsByTimestamp retrieves a row from 'CUPTI_ACTIVITY_KIND_PREEMPTION' as a CuptiActivityKindPreemption.
//
// Generated from index 'INDEX_CUPTI_ACTIVITY_KIND_PREEMPTION'.
func CuptiActivityKindPreemptionsByTimestamp(db XODB, timestamp int) ([]*CuptiActivityKindPreemption, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`_id_, preemptionKind, timestamp, gridId, blockX, blockY, blockZ ` +
		`FROM CUPTI_ACTIVITY_KIND_PREEMPTION ` +
		`WHERE timestamp = ?`

	// run query
	XOLog(sqlstr, timestamp)
	q, err := db.Query(sqlstr, timestamp)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*CuptiActivityKindPreemption{}
	for q.Next() {
		cakp := CuptiActivityKindPreemption{
			_exists: true,
		}

		// scan
		err = q.Scan(&cakp.ID, &cakp.Preemptionkind, &cakp.Timestamp, &cakp.Gridid, &cakp.Blockx, &cakp.Blocky, &cakp.Blockz)
		if err != nil {
			return nil, err
		}

		res = append(res, &cakp)
	}

	return res, nil
}
