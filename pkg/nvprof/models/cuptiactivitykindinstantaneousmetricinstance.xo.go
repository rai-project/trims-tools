// Package models contains the types for schema ''.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
)

// CuptiActivityKindInstantaneousMetricInstance represents a row from 'CUPTI_ACTIVITY_KIND_INSTANTANEOUS_METRIC_INSTANCE'.
type CuptiActivityKindInstantaneousMetricInstance struct {
	ID        sql.NullInt64 `json:"_id_"`      // _id_
	ID        int           `json:"id"`        // id
	Value     []byte        `json:"value"`     // value
	Timestamp int           `json:"timestamp"` // timestamp
	Deviceid  int           `json:"deviceId"`  // deviceId
	Flags     int           `json:"flags"`     // flags
	Instance  int           `json:"instance"`  // instance

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the CuptiActivityKindInstantaneousMetricInstance exists in the database.
func (cakimi *CuptiActivityKindInstantaneousMetricInstance) Exists() bool {
	return cakimi._exists
}

// Deleted provides information if the CuptiActivityKindInstantaneousMetricInstance has been deleted from the database.
func (cakimi *CuptiActivityKindInstantaneousMetricInstance) Deleted() bool {
	return cakimi._deleted
}

// Insert inserts the CuptiActivityKindInstantaneousMetricInstance to the database.
func (cakimi *CuptiActivityKindInstantaneousMetricInstance) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if cakimi._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO CUPTI_ACTIVITY_KIND_INSTANTANEOUS_METRIC_INSTANCE (` +
		`value, timestamp, deviceId, flags, instance` +
		`) VALUES (` +
		`?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, cakimi.Value, cakimi.Timestamp, cakimi.Deviceid, cakimi.Flags, cakimi.Instance)
	res, err := db.Exec(sqlstr, cakimi.Value, cakimi.Timestamp, cakimi.Deviceid, cakimi.Flags, cakimi.Instance)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	cakimi.ID = sql.NullInt64(id)
	cakimi._exists = true

	return nil
}

// Update updates the CuptiActivityKindInstantaneousMetricInstance in the database.
func (cakimi *CuptiActivityKindInstantaneousMetricInstance) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !cakimi._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if cakimi._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE CUPTI_ACTIVITY_KIND_INSTANTANEOUS_METRIC_INSTANCE SET ` +
		`value = ?, timestamp = ?, deviceId = ?, flags = ?, instance = ?` +
		` WHERE _id_ = ?`

	// run query
	XOLog(sqlstr, cakimi.Value, cakimi.Timestamp, cakimi.Deviceid, cakimi.Flags, cakimi.Instance, cakimi.ID)
	_, err = db.Exec(sqlstr, cakimi.Value, cakimi.Timestamp, cakimi.Deviceid, cakimi.Flags, cakimi.Instance, cakimi.ID)
	return err
}

// Save saves the CuptiActivityKindInstantaneousMetricInstance to the database.
func (cakimi *CuptiActivityKindInstantaneousMetricInstance) Save(db XODB) error {
	if cakimi.Exists() {
		return cakimi.Update(db)
	}

	return cakimi.Insert(db)
}

// Delete deletes the CuptiActivityKindInstantaneousMetricInstance from the database.
func (cakimi *CuptiActivityKindInstantaneousMetricInstance) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !cakimi._exists {
		return nil
	}

	// if deleted, bail
	if cakimi._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM CUPTI_ACTIVITY_KIND_INSTANTANEOUS_METRIC_INSTANCE WHERE _id_ = ?`

	// run query
	XOLog(sqlstr, cakimi.ID)
	_, err = db.Exec(sqlstr, cakimi.ID)
	if err != nil {
		return err
	}

	// set deleted
	cakimi._deleted = true

	return nil
}

// CuptiActivityKindInstantaneousMetricInstanceByID retrieves a row from 'CUPTI_ACTIVITY_KIND_INSTANTANEOUS_METRIC_INSTANCE' as a CuptiActivityKindInstantaneousMetricInstance.
//
// Generated from index 'CUPTI_ACTIVITY_KIND_INSTANTANEOUS_METRIC_INSTANCE__id__pkey'.
func CuptiActivityKindInstantaneousMetricInstanceByID(db XODB, id sql.NullInt64) (*CuptiActivityKindInstantaneousMetricInstance, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`_id_, id, value, timestamp, deviceId, flags, instance ` +
		`FROM CUPTI_ACTIVITY_KIND_INSTANTANEOUS_METRIC_INSTANCE ` +
		`WHERE _id_ = ?`

	// run query
	XOLog(sqlstr, id)
	cakimi := CuptiActivityKindInstantaneousMetricInstance{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&cakimi.ID, &cakimi.ID, &cakimi.Value, &cakimi.Timestamp, &cakimi.Deviceid, &cakimi.Flags, &cakimi.Instance)
	if err != nil {
		return nil, err
	}

	return &cakimi, nil
}

// CuptiActivityKindInstantaneousMetricInstancesByTimestamp retrieves a row from 'CUPTI_ACTIVITY_KIND_INSTANTANEOUS_METRIC_INSTANCE' as a CuptiActivityKindInstantaneousMetricInstance.
//
// Generated from index 'INDEX_CUPTI_ACTIVITY_KIND_INSTANTANEOUS_METRIC_INSTANCE'.
func CuptiActivityKindInstantaneousMetricInstancesByTimestamp(db XODB, timestamp int) ([]*CuptiActivityKindInstantaneousMetricInstance, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`_id_, id, value, timestamp, deviceId, flags, instance ` +
		`FROM CUPTI_ACTIVITY_KIND_INSTANTANEOUS_METRIC_INSTANCE ` +
		`WHERE timestamp = ?`

	// run query
	XOLog(sqlstr, timestamp)
	q, err := db.Query(sqlstr, timestamp)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*CuptiActivityKindInstantaneousMetricInstance{}
	for q.Next() {
		cakimi := CuptiActivityKindInstantaneousMetricInstance{
			_exists: true,
		}

		// scan
		err = q.Scan(&cakimi.ID, &cakimi.ID, &cakimi.Value, &cakimi.Timestamp, &cakimi.Deviceid, &cakimi.Flags, &cakimi.Instance)
		if err != nil {
			return nil, err
		}

		res = append(res, &cakimi)
	}

	return res, nil
}
