// Package models contains the types for schema ''.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
)

// CuptiActivityKindDevice represents a row from 'CUPTI_ACTIVITY_KIND_DEVICE'.
type CuptiActivityKindDevice struct {
	ID                               sql.NullInt64 `json:"_id_"`                             // _id_
	Flags                            int           `json:"flags"`                            // flags
	Globalmemorybandwidth            int           `json:"globalMemoryBandwidth"`            // globalMemoryBandwidth
	Globalmemorysize                 int           `json:"globalMemorySize"`                 // globalMemorySize
	Constantmemorysize               int           `json:"constantMemorySize"`               // constantMemorySize
	L2cachesize                      int           `json:"l2CacheSize"`                      // l2CacheSize
	Numthreadsperwarp                int           `json:"numThreadsPerWarp"`                // numThreadsPerWarp
	Coreclockrate                    int           `json:"coreClockRate"`                    // coreClockRate
	Nummemcpyengines                 int           `json:"numMemcpyEngines"`                 // numMemcpyEngines
	Nummultiprocessors               int           `json:"numMultiprocessors"`               // numMultiprocessors
	Maxipc                           int           `json:"maxIPC"`                           // maxIPC
	Maxwarpspermultiprocessor        int           `json:"maxWarpsPerMultiprocessor"`        // maxWarpsPerMultiprocessor
	Maxblockspermultiprocessor       int           `json:"maxBlocksPerMultiprocessor"`       // maxBlocksPerMultiprocessor
	Maxsharedmemorypermultiprocessor int           `json:"maxSharedMemoryPerMultiprocessor"` // maxSharedMemoryPerMultiprocessor
	Maxregisterspermultiprocessor    int           `json:"maxRegistersPerMultiprocessor"`    // maxRegistersPerMultiprocessor
	Maxregistersperblock             int           `json:"maxRegistersPerBlock"`             // maxRegistersPerBlock
	Maxsharedmemoryperblock          int           `json:"maxSharedMemoryPerBlock"`          // maxSharedMemoryPerBlock
	Maxthreadsperblock               int           `json:"maxThreadsPerBlock"`               // maxThreadsPerBlock
	Maxblockdimx                     int           `json:"maxBlockDimX"`                     // maxBlockDimX
	Maxblockdimy                     int           `json:"maxBlockDimY"`                     // maxBlockDimY
	Maxblockdimz                     int           `json:"maxBlockDimZ"`                     // maxBlockDimZ
	Maxgriddimx                      int           `json:"maxGridDimX"`                      // maxGridDimX
	Maxgriddimy                      int           `json:"maxGridDimY"`                      // maxGridDimY
	Maxgriddimz                      int           `json:"maxGridDimZ"`                      // maxGridDimZ
	Computecapabilitymajor           int           `json:"computeCapabilityMajor"`           // computeCapabilityMajor
	Computecapabilityminor           int           `json:"computeCapabilityMinor"`           // computeCapabilityMinor
	ID                               int           `json:"id"`                               // id
	Eccenabled                       int           `json:"eccEnabled"`                       // eccEnabled
	UUID                             []byte        `json:"uuid"`                             // uuid
	Name                             int           `json:"name"`                             // name

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the CuptiActivityKindDevice exists in the database.
func (cakd *CuptiActivityKindDevice) Exists() bool {
	return cakd._exists
}

// Deleted provides information if the CuptiActivityKindDevice has been deleted from the database.
func (cakd *CuptiActivityKindDevice) Deleted() bool {
	return cakd._deleted
}

// Insert inserts the CuptiActivityKindDevice to the database.
func (cakd *CuptiActivityKindDevice) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if cakd._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO CUPTI_ACTIVITY_KIND_DEVICE (` +
		`flags, globalMemoryBandwidth, globalMemorySize, constantMemorySize, l2CacheSize, numThreadsPerWarp, coreClockRate, numMemcpyEngines, numMultiprocessors, maxIPC, maxWarpsPerMultiprocessor, maxBlocksPerMultiprocessor, maxSharedMemoryPerMultiprocessor, maxRegistersPerMultiprocessor, maxRegistersPerBlock, maxSharedMemoryPerBlock, maxThreadsPerBlock, maxBlockDimX, maxBlockDimY, maxBlockDimZ, maxGridDimX, maxGridDimY, maxGridDimZ, computeCapabilityMajor, computeCapabilityMinor, eccEnabled, uuid, name` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, cakd.Flags, cakd.Globalmemorybandwidth, cakd.Globalmemorysize, cakd.Constantmemorysize, cakd.L2cachesize, cakd.Numthreadsperwarp, cakd.Coreclockrate, cakd.Nummemcpyengines, cakd.Nummultiprocessors, cakd.Maxipc, cakd.Maxwarpspermultiprocessor, cakd.Maxblockspermultiprocessor, cakd.Maxsharedmemorypermultiprocessor, cakd.Maxregisterspermultiprocessor, cakd.Maxregistersperblock, cakd.Maxsharedmemoryperblock, cakd.Maxthreadsperblock, cakd.Maxblockdimx, cakd.Maxblockdimy, cakd.Maxblockdimz, cakd.Maxgriddimx, cakd.Maxgriddimy, cakd.Maxgriddimz, cakd.Computecapabilitymajor, cakd.Computecapabilityminor, cakd.Eccenabled, cakd.UUID, cakd.Name)
	res, err := db.Exec(sqlstr, cakd.Flags, cakd.Globalmemorybandwidth, cakd.Globalmemorysize, cakd.Constantmemorysize, cakd.L2cachesize, cakd.Numthreadsperwarp, cakd.Coreclockrate, cakd.Nummemcpyengines, cakd.Nummultiprocessors, cakd.Maxipc, cakd.Maxwarpspermultiprocessor, cakd.Maxblockspermultiprocessor, cakd.Maxsharedmemorypermultiprocessor, cakd.Maxregisterspermultiprocessor, cakd.Maxregistersperblock, cakd.Maxsharedmemoryperblock, cakd.Maxthreadsperblock, cakd.Maxblockdimx, cakd.Maxblockdimy, cakd.Maxblockdimz, cakd.Maxgriddimx, cakd.Maxgriddimy, cakd.Maxgriddimz, cakd.Computecapabilitymajor, cakd.Computecapabilityminor, cakd.Eccenabled, cakd.UUID, cakd.Name)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	cakd.ID = sql.NullInt64(id)
	cakd._exists = true

	return nil
}

// Update updates the CuptiActivityKindDevice in the database.
func (cakd *CuptiActivityKindDevice) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !cakd._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if cakd._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE CUPTI_ACTIVITY_KIND_DEVICE SET ` +
		`flags = ?, globalMemoryBandwidth = ?, globalMemorySize = ?, constantMemorySize = ?, l2CacheSize = ?, numThreadsPerWarp = ?, coreClockRate = ?, numMemcpyEngines = ?, numMultiprocessors = ?, maxIPC = ?, maxWarpsPerMultiprocessor = ?, maxBlocksPerMultiprocessor = ?, maxSharedMemoryPerMultiprocessor = ?, maxRegistersPerMultiprocessor = ?, maxRegistersPerBlock = ?, maxSharedMemoryPerBlock = ?, maxThreadsPerBlock = ?, maxBlockDimX = ?, maxBlockDimY = ?, maxBlockDimZ = ?, maxGridDimX = ?, maxGridDimY = ?, maxGridDimZ = ?, computeCapabilityMajor = ?, computeCapabilityMinor = ?, eccEnabled = ?, uuid = ?, name = ?` +
		` WHERE _id_ = ?`

	// run query
	XOLog(sqlstr, cakd.Flags, cakd.Globalmemorybandwidth, cakd.Globalmemorysize, cakd.Constantmemorysize, cakd.L2cachesize, cakd.Numthreadsperwarp, cakd.Coreclockrate, cakd.Nummemcpyengines, cakd.Nummultiprocessors, cakd.Maxipc, cakd.Maxwarpspermultiprocessor, cakd.Maxblockspermultiprocessor, cakd.Maxsharedmemorypermultiprocessor, cakd.Maxregisterspermultiprocessor, cakd.Maxregistersperblock, cakd.Maxsharedmemoryperblock, cakd.Maxthreadsperblock, cakd.Maxblockdimx, cakd.Maxblockdimy, cakd.Maxblockdimz, cakd.Maxgriddimx, cakd.Maxgriddimy, cakd.Maxgriddimz, cakd.Computecapabilitymajor, cakd.Computecapabilityminor, cakd.Eccenabled, cakd.UUID, cakd.Name, cakd.ID)
	_, err = db.Exec(sqlstr, cakd.Flags, cakd.Globalmemorybandwidth, cakd.Globalmemorysize, cakd.Constantmemorysize, cakd.L2cachesize, cakd.Numthreadsperwarp, cakd.Coreclockrate, cakd.Nummemcpyengines, cakd.Nummultiprocessors, cakd.Maxipc, cakd.Maxwarpspermultiprocessor, cakd.Maxblockspermultiprocessor, cakd.Maxsharedmemorypermultiprocessor, cakd.Maxregisterspermultiprocessor, cakd.Maxregistersperblock, cakd.Maxsharedmemoryperblock, cakd.Maxthreadsperblock, cakd.Maxblockdimx, cakd.Maxblockdimy, cakd.Maxblockdimz, cakd.Maxgriddimx, cakd.Maxgriddimy, cakd.Maxgriddimz, cakd.Computecapabilitymajor, cakd.Computecapabilityminor, cakd.Eccenabled, cakd.UUID, cakd.Name, cakd.ID)
	return err
}

// Save saves the CuptiActivityKindDevice to the database.
func (cakd *CuptiActivityKindDevice) Save(db XODB) error {
	if cakd.Exists() {
		return cakd.Update(db)
	}

	return cakd.Insert(db)
}

// Delete deletes the CuptiActivityKindDevice from the database.
func (cakd *CuptiActivityKindDevice) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !cakd._exists {
		return nil
	}

	// if deleted, bail
	if cakd._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM CUPTI_ACTIVITY_KIND_DEVICE WHERE _id_ = ?`

	// run query
	XOLog(sqlstr, cakd.ID)
	_, err = db.Exec(sqlstr, cakd.ID)
	if err != nil {
		return err
	}

	// set deleted
	cakd._deleted = true

	return nil
}

// CuptiActivityKindDeviceByID retrieves a row from 'CUPTI_ACTIVITY_KIND_DEVICE' as a CuptiActivityKindDevice.
//
// Generated from index 'CUPTI_ACTIVITY_KIND_DEVICE__id__pkey'.
func CuptiActivityKindDeviceByID(db XODB, id sql.NullInt64) (*CuptiActivityKindDevice, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`_id_, flags, globalMemoryBandwidth, globalMemorySize, constantMemorySize, l2CacheSize, numThreadsPerWarp, coreClockRate, numMemcpyEngines, numMultiprocessors, maxIPC, maxWarpsPerMultiprocessor, maxBlocksPerMultiprocessor, maxSharedMemoryPerMultiprocessor, maxRegistersPerMultiprocessor, maxRegistersPerBlock, maxSharedMemoryPerBlock, maxThreadsPerBlock, maxBlockDimX, maxBlockDimY, maxBlockDimZ, maxGridDimX, maxGridDimY, maxGridDimZ, computeCapabilityMajor, computeCapabilityMinor, id, eccEnabled, uuid, name ` +
		`FROM CUPTI_ACTIVITY_KIND_DEVICE ` +
		`WHERE _id_ = ?`

	// run query
	XOLog(sqlstr, id)
	cakd := CuptiActivityKindDevice{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&cakd.ID, &cakd.Flags, &cakd.Globalmemorybandwidth, &cakd.Globalmemorysize, &cakd.Constantmemorysize, &cakd.L2cachesize, &cakd.Numthreadsperwarp, &cakd.Coreclockrate, &cakd.Nummemcpyengines, &cakd.Nummultiprocessors, &cakd.Maxipc, &cakd.Maxwarpspermultiprocessor, &cakd.Maxblockspermultiprocessor, &cakd.Maxsharedmemorypermultiprocessor, &cakd.Maxregisterspermultiprocessor, &cakd.Maxregistersperblock, &cakd.Maxsharedmemoryperblock, &cakd.Maxthreadsperblock, &cakd.Maxblockdimx, &cakd.Maxblockdimy, &cakd.Maxblockdimz, &cakd.Maxgriddimx, &cakd.Maxgriddimy, &cakd.Maxgriddimz, &cakd.Computecapabilitymajor, &cakd.Computecapabilityminor, &cakd.ID, &cakd.Eccenabled, &cakd.UUID, &cakd.Name)
	if err != nil {
		return nil, err
	}

	return &cakd, nil
}
