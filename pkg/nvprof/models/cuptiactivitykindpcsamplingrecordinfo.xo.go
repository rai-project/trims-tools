// Package models contains the types for schema ''.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
)

// CuptiActivityKindPcSamplingRecordInfo represents a row from 'CUPTI_ACTIVITY_KIND_PC_SAMPLING_RECORD_INFO'.
type CuptiActivityKindPcSamplingRecordInfo struct {
	ID                     sql.NullInt64 `json:"_id_"`                   // _id_
	Correlationid          int           `json:"correlationId"`          // correlationId
	Totalsamples           int           `json:"totalSamples"`           // totalSamples
	Droppedsamples         int           `json:"droppedSamples"`         // droppedSamples
	Samplingperiodincycles int           `json:"samplingPeriodInCycles"` // samplingPeriodInCycles

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the CuptiActivityKindPcSamplingRecordInfo exists in the database.
func (cakpsri *CuptiActivityKindPcSamplingRecordInfo) Exists() bool {
	return cakpsri._exists
}

// Deleted provides information if the CuptiActivityKindPcSamplingRecordInfo has been deleted from the database.
func (cakpsri *CuptiActivityKindPcSamplingRecordInfo) Deleted() bool {
	return cakpsri._deleted
}

// Insert inserts the CuptiActivityKindPcSamplingRecordInfo to the database.
func (cakpsri *CuptiActivityKindPcSamplingRecordInfo) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if cakpsri._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO CUPTI_ACTIVITY_KIND_PC_SAMPLING_RECORD_INFO (` +
		`correlationId, totalSamples, droppedSamples, samplingPeriodInCycles` +
		`) VALUES (` +
		`?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, cakpsri.Correlationid, cakpsri.Totalsamples, cakpsri.Droppedsamples, cakpsri.Samplingperiodincycles)
	res, err := db.Exec(sqlstr, cakpsri.Correlationid, cakpsri.Totalsamples, cakpsri.Droppedsamples, cakpsri.Samplingperiodincycles)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	cakpsri.ID = sql.NullInt64(id)
	cakpsri._exists = true

	return nil
}

// Update updates the CuptiActivityKindPcSamplingRecordInfo in the database.
func (cakpsri *CuptiActivityKindPcSamplingRecordInfo) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !cakpsri._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if cakpsri._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE CUPTI_ACTIVITY_KIND_PC_SAMPLING_RECORD_INFO SET ` +
		`correlationId = ?, totalSamples = ?, droppedSamples = ?, samplingPeriodInCycles = ?` +
		` WHERE _id_ = ?`

	// run query
	XOLog(sqlstr, cakpsri.Correlationid, cakpsri.Totalsamples, cakpsri.Droppedsamples, cakpsri.Samplingperiodincycles, cakpsri.ID)
	_, err = db.Exec(sqlstr, cakpsri.Correlationid, cakpsri.Totalsamples, cakpsri.Droppedsamples, cakpsri.Samplingperiodincycles, cakpsri.ID)
	return err
}

// Save saves the CuptiActivityKindPcSamplingRecordInfo to the database.
func (cakpsri *CuptiActivityKindPcSamplingRecordInfo) Save(db XODB) error {
	if cakpsri.Exists() {
		return cakpsri.Update(db)
	}

	return cakpsri.Insert(db)
}

// Delete deletes the CuptiActivityKindPcSamplingRecordInfo from the database.
func (cakpsri *CuptiActivityKindPcSamplingRecordInfo) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !cakpsri._exists {
		return nil
	}

	// if deleted, bail
	if cakpsri._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM CUPTI_ACTIVITY_KIND_PC_SAMPLING_RECORD_INFO WHERE _id_ = ?`

	// run query
	XOLog(sqlstr, cakpsri.ID)
	_, err = db.Exec(sqlstr, cakpsri.ID)
	if err != nil {
		return err
	}

	// set deleted
	cakpsri._deleted = true

	return nil
}

// CuptiActivityKindPcSamplingRecordInfoByID retrieves a row from 'CUPTI_ACTIVITY_KIND_PC_SAMPLING_RECORD_INFO' as a CuptiActivityKindPcSamplingRecordInfo.
//
// Generated from index 'CUPTI_ACTIVITY_KIND_PC_SAMPLING_RECORD_INFO__id__pkey'.
func CuptiActivityKindPcSamplingRecordInfoByID(db XODB, id sql.NullInt64) (*CuptiActivityKindPcSamplingRecordInfo, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`_id_, correlationId, totalSamples, droppedSamples, samplingPeriodInCycles ` +
		`FROM CUPTI_ACTIVITY_KIND_PC_SAMPLING_RECORD_INFO ` +
		`WHERE _id_ = ?`

	// run query
	XOLog(sqlstr, id)
	cakpsri := CuptiActivityKindPcSamplingRecordInfo{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&cakpsri.ID, &cakpsri.Correlationid, &cakpsri.Totalsamples, &cakpsri.Droppedsamples, &cakpsri.Samplingperiodincycles)
	if err != nil {
		return nil, err
	}

	return &cakpsri, nil
}

// CuptiActivityKindPcSamplingRecordInfosByCorrelationid retrieves a row from 'CUPTI_ACTIVITY_KIND_PC_SAMPLING_RECORD_INFO' as a CuptiActivityKindPcSamplingRecordInfo.
//
// Generated from index 'INDEX_CUPTI_ACTIVITY_KIND_PC_SAMPLING_RECORD_INFO'.
func CuptiActivityKindPcSamplingRecordInfosByCorrelationid(db XODB, correlationid int) ([]*CuptiActivityKindPcSamplingRecordInfo, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`_id_, correlationId, totalSamples, droppedSamples, samplingPeriodInCycles ` +
		`FROM CUPTI_ACTIVITY_KIND_PC_SAMPLING_RECORD_INFO ` +
		`WHERE correlationId = ?`

	// run query
	XOLog(sqlstr, correlationid)
	q, err := db.Query(sqlstr, correlationid)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*CuptiActivityKindPcSamplingRecordInfo{}
	for q.Next() {
		cakpsri := CuptiActivityKindPcSamplingRecordInfo{
			_exists: true,
		}

		// scan
		err = q.Scan(&cakpsri.ID, &cakpsri.Correlationid, &cakpsri.Totalsamples, &cakpsri.Droppedsamples, &cakpsri.Samplingperiodincycles)
		if err != nil {
			return nil, err
		}

		res = append(res, &cakpsri)
	}

	return res, nil
}
