// Package models contains the types for schema ''.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
)

// CuptiActivityKindUnifiedMemoryCounter represents a row from 'CUPTI_ACTIVITY_KIND_UNIFIED_MEMORY_COUNTER'.
type CuptiActivityKindUnifiedMemoryCounter struct {
	ID          sql.NullInt64 `json:"_id_"`        // _id_
	Counterkind int           `json:"counterKind"` // counterKind
	Value       int           `json:"value"`       // value
	Start       int           `json:"start"`       // start
	End         int           `json:"end"`         // end
	Address     int           `json:"address"`     // address
	Srcid       int           `json:"srcId"`       // srcId
	Dstid       int           `json:"dstId"`       // dstId
	Streamid    int           `json:"streamId"`    // streamId
	Processid   int           `json:"processId"`   // processId
	Flags       int           `json:"flags"`       // flags

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the CuptiActivityKindUnifiedMemoryCounter exists in the database.
func (cakumc *CuptiActivityKindUnifiedMemoryCounter) Exists() bool {
	return cakumc._exists
}

// Deleted provides information if the CuptiActivityKindUnifiedMemoryCounter has been deleted from the database.
func (cakumc *CuptiActivityKindUnifiedMemoryCounter) Deleted() bool {
	return cakumc._deleted
}

// Insert inserts the CuptiActivityKindUnifiedMemoryCounter to the database.
func (cakumc *CuptiActivityKindUnifiedMemoryCounter) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if cakumc._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO CUPTI_ACTIVITY_KIND_UNIFIED_MEMORY_COUNTER (` +
		`counterKind, value, start, end, address, srcId, dstId, streamId, processId, flags` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, cakumc.Counterkind, cakumc.Value, cakumc.Start, cakumc.End, cakumc.Address, cakumc.Srcid, cakumc.Dstid, cakumc.Streamid, cakumc.Processid, cakumc.Flags)
	res, err := db.Exec(sqlstr, cakumc.Counterkind, cakumc.Value, cakumc.Start, cakumc.End, cakumc.Address, cakumc.Srcid, cakumc.Dstid, cakumc.Streamid, cakumc.Processid, cakumc.Flags)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	cakumc.ID = sql.NullInt64(id)
	cakumc._exists = true

	return nil
}

// Update updates the CuptiActivityKindUnifiedMemoryCounter in the database.
func (cakumc *CuptiActivityKindUnifiedMemoryCounter) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !cakumc._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if cakumc._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE CUPTI_ACTIVITY_KIND_UNIFIED_MEMORY_COUNTER SET ` +
		`counterKind = ?, value = ?, start = ?, end = ?, address = ?, srcId = ?, dstId = ?, streamId = ?, processId = ?, flags = ?` +
		` WHERE _id_ = ?`

	// run query
	XOLog(sqlstr, cakumc.Counterkind, cakumc.Value, cakumc.Start, cakumc.End, cakumc.Address, cakumc.Srcid, cakumc.Dstid, cakumc.Streamid, cakumc.Processid, cakumc.Flags, cakumc.ID)
	_, err = db.Exec(sqlstr, cakumc.Counterkind, cakumc.Value, cakumc.Start, cakumc.End, cakumc.Address, cakumc.Srcid, cakumc.Dstid, cakumc.Streamid, cakumc.Processid, cakumc.Flags, cakumc.ID)
	return err
}

// Save saves the CuptiActivityKindUnifiedMemoryCounter to the database.
func (cakumc *CuptiActivityKindUnifiedMemoryCounter) Save(db XODB) error {
	if cakumc.Exists() {
		return cakumc.Update(db)
	}

	return cakumc.Insert(db)
}

// Delete deletes the CuptiActivityKindUnifiedMemoryCounter from the database.
func (cakumc *CuptiActivityKindUnifiedMemoryCounter) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !cakumc._exists {
		return nil
	}

	// if deleted, bail
	if cakumc._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM CUPTI_ACTIVITY_KIND_UNIFIED_MEMORY_COUNTER WHERE _id_ = ?`

	// run query
	XOLog(sqlstr, cakumc.ID)
	_, err = db.Exec(sqlstr, cakumc.ID)
	if err != nil {
		return err
	}

	// set deleted
	cakumc._deleted = true

	return nil
}

// CuptiActivityKindUnifiedMemoryCounterByID retrieves a row from 'CUPTI_ACTIVITY_KIND_UNIFIED_MEMORY_COUNTER' as a CuptiActivityKindUnifiedMemoryCounter.
//
// Generated from index 'CUPTI_ACTIVITY_KIND_UNIFIED_MEMORY_COUNTER__id__pkey'.
func CuptiActivityKindUnifiedMemoryCounterByID(db XODB, id sql.NullInt64) (*CuptiActivityKindUnifiedMemoryCounter, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`_id_, counterKind, value, start, end, address, srcId, dstId, streamId, processId, flags ` +
		`FROM CUPTI_ACTIVITY_KIND_UNIFIED_MEMORY_COUNTER ` +
		`WHERE _id_ = ?`

	// run query
	XOLog(sqlstr, id)
	cakumc := CuptiActivityKindUnifiedMemoryCounter{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&cakumc.ID, &cakumc.Counterkind, &cakumc.Value, &cakumc.Start, &cakumc.End, &cakumc.Address, &cakumc.Srcid, &cakumc.Dstid, &cakumc.Streamid, &cakumc.Processid, &cakumc.Flags)
	if err != nil {
		return nil, err
	}

	return &cakumc, nil
}

// CuptiActivityKindUnifiedMemoryCountersByStart retrieves a row from 'CUPTI_ACTIVITY_KIND_UNIFIED_MEMORY_COUNTER' as a CuptiActivityKindUnifiedMemoryCounter.
//
// Generated from index 'INDEX_CUPTI_ACTIVITY_KIND_UNIFIED_MEMORY_COUNTER'.
func CuptiActivityKindUnifiedMemoryCountersByStart(db XODB, start int) ([]*CuptiActivityKindUnifiedMemoryCounter, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`_id_, counterKind, value, start, end, address, srcId, dstId, streamId, processId, flags ` +
		`FROM CUPTI_ACTIVITY_KIND_UNIFIED_MEMORY_COUNTER ` +
		`WHERE start = ?`

	// run query
	XOLog(sqlstr, start)
	q, err := db.Query(sqlstr, start)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*CuptiActivityKindUnifiedMemoryCounter{}
	for q.Next() {
		cakumc := CuptiActivityKindUnifiedMemoryCounter{
			_exists: true,
		}

		// scan
		err = q.Scan(&cakumc.ID, &cakumc.Counterkind, &cakumc.Value, &cakumc.Start, &cakumc.End, &cakumc.Address, &cakumc.Srcid, &cakumc.Dstid, &cakumc.Streamid, &cakumc.Processid, &cakumc.Flags)
		if err != nil {
			return nil, err
		}

		res = append(res, &cakumc)
	}

	return res, nil
}
