// Package models contains the types for schema ''.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
)

// CuptiActivityKindMemset represents a row from 'CUPTI_ACTIVITY_KIND_MEMSET'.
type CuptiActivityKindMemset struct {
	ID            sql.NullInt64 `json:"_id_"`          // _id_
	Value         int           `json:"value"`         // value
	Bytes         int           `json:"bytes"`         // bytes
	Start         int           `json:"start"`         // start
	End           int           `json:"end"`           // end
	Deviceid      int           `json:"deviceId"`      // deviceId
	Contextid     int           `json:"contextId"`     // contextId
	Streamid      int           `json:"streamId"`      // streamId
	Correlationid int           `json:"correlationId"` // correlationId
	Flags         int           `json:"flags"`         // flags
	Memorykind    int           `json:"memoryKind"`    // memoryKind

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the CuptiActivityKindMemset exists in the database.
func (cakm *CuptiActivityKindMemset) Exists() bool {
	return cakm._exists
}

// Deleted provides information if the CuptiActivityKindMemset has been deleted from the database.
func (cakm *CuptiActivityKindMemset) Deleted() bool {
	return cakm._deleted
}

// Insert inserts the CuptiActivityKindMemset to the database.
func (cakm *CuptiActivityKindMemset) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if cakm._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO CUPTI_ACTIVITY_KIND_MEMSET (` +
		`value, bytes, start, end, deviceId, contextId, streamId, correlationId, flags, memoryKind` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, cakm.Value, cakm.Bytes, cakm.Start, cakm.End, cakm.Deviceid, cakm.Contextid, cakm.Streamid, cakm.Correlationid, cakm.Flags, cakm.Memorykind)
	res, err := db.Exec(sqlstr, cakm.Value, cakm.Bytes, cakm.Start, cakm.End, cakm.Deviceid, cakm.Contextid, cakm.Streamid, cakm.Correlationid, cakm.Flags, cakm.Memorykind)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	cakm.ID = sql.NullInt64(id)
	cakm._exists = true

	return nil
}

// Update updates the CuptiActivityKindMemset in the database.
func (cakm *CuptiActivityKindMemset) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !cakm._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if cakm._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE CUPTI_ACTIVITY_KIND_MEMSET SET ` +
		`value = ?, bytes = ?, start = ?, end = ?, deviceId = ?, contextId = ?, streamId = ?, correlationId = ?, flags = ?, memoryKind = ?` +
		` WHERE _id_ = ?`

	// run query
	XOLog(sqlstr, cakm.Value, cakm.Bytes, cakm.Start, cakm.End, cakm.Deviceid, cakm.Contextid, cakm.Streamid, cakm.Correlationid, cakm.Flags, cakm.Memorykind, cakm.ID)
	_, err = db.Exec(sqlstr, cakm.Value, cakm.Bytes, cakm.Start, cakm.End, cakm.Deviceid, cakm.Contextid, cakm.Streamid, cakm.Correlationid, cakm.Flags, cakm.Memorykind, cakm.ID)
	return err
}

// Save saves the CuptiActivityKindMemset to the database.
func (cakm *CuptiActivityKindMemset) Save(db XODB) error {
	if cakm.Exists() {
		return cakm.Update(db)
	}

	return cakm.Insert(db)
}

// Delete deletes the CuptiActivityKindMemset from the database.
func (cakm *CuptiActivityKindMemset) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !cakm._exists {
		return nil
	}

	// if deleted, bail
	if cakm._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM CUPTI_ACTIVITY_KIND_MEMSET WHERE _id_ = ?`

	// run query
	XOLog(sqlstr, cakm.ID)
	_, err = db.Exec(sqlstr, cakm.ID)
	if err != nil {
		return err
	}

	// set deleted
	cakm._deleted = true

	return nil
}

// CuptiActivityKindMemsetByID retrieves a row from 'CUPTI_ACTIVITY_KIND_MEMSET' as a CuptiActivityKindMemset.
//
// Generated from index 'CUPTI_ACTIVITY_KIND_MEMSET__id__pkey'.
func CuptiActivityKindMemsetByID(db XODB, id sql.NullInt64) (*CuptiActivityKindMemset, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`_id_, value, bytes, start, end, deviceId, contextId, streamId, correlationId, flags, memoryKind ` +
		`FROM CUPTI_ACTIVITY_KIND_MEMSET ` +
		`WHERE _id_ = ?`

	// run query
	XOLog(sqlstr, id)
	cakm := CuptiActivityKindMemset{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&cakm.ID, &cakm.Value, &cakm.Bytes, &cakm.Start, &cakm.End, &cakm.Deviceid, &cakm.Contextid, &cakm.Streamid, &cakm.Correlationid, &cakm.Flags, &cakm.Memorykind)
	if err != nil {
		return nil, err
	}

	return &cakm, nil
}

// CuptiActivityKindMemsetsByCorrelationid retrieves a row from 'CUPTI_ACTIVITY_KIND_MEMSET' as a CuptiActivityKindMemset.
//
// Generated from index 'INDEX_CUPTI_ACTIVITY_KIND_MEMSET'.
func CuptiActivityKindMemsetsByCorrelationid(db XODB, correlationid int) ([]*CuptiActivityKindMemset, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`_id_, value, bytes, start, end, deviceId, contextId, streamId, correlationId, flags, memoryKind ` +
		`FROM CUPTI_ACTIVITY_KIND_MEMSET ` +
		`WHERE correlationId = ?`

	// run query
	XOLog(sqlstr, correlationid)
	q, err := db.Query(sqlstr, correlationid)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*CuptiActivityKindMemset{}
	for q.Next() {
		cakm := CuptiActivityKindMemset{
			_exists: true,
		}

		// scan
		err = q.Scan(&cakm.ID, &cakm.Value, &cakm.Bytes, &cakm.Start, &cakm.End, &cakm.Deviceid, &cakm.Contextid, &cakm.Streamid, &cakm.Correlationid, &cakm.Flags, &cakm.Memorykind)
		if err != nil {
			return nil, err
		}

		res = append(res, &cakm)
	}

	return res, nil
}
