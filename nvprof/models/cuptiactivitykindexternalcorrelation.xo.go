// Package models contains the types for schema ''.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
)

// CuptiActivityKindExternalCorrelation represents a row from 'CUPTI_ACTIVITY_KIND_EXTERNAL_CORRELATION'.
type CuptiActivityKindExternalCorrelation struct {
	ID            sql.NullInt64 `json:"_id_"`          // _id_
	Externalkind  int           `json:"externalKind"`  // externalKind
	Externalid    int           `json:"externalId"`    // externalId
	Correlationid int           `json:"correlationId"` // correlationId

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the CuptiActivityKindExternalCorrelation exists in the database.
func (cakec *CuptiActivityKindExternalCorrelation) Exists() bool {
	return cakec._exists
}

// Deleted provides information if the CuptiActivityKindExternalCorrelation has been deleted from the database.
func (cakec *CuptiActivityKindExternalCorrelation) Deleted() bool {
	return cakec._deleted
}

// Insert inserts the CuptiActivityKindExternalCorrelation to the database.
func (cakec *CuptiActivityKindExternalCorrelation) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if cakec._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO CUPTI_ACTIVITY_KIND_EXTERNAL_CORRELATION (` +
		`externalKind, externalId, correlationId` +
		`) VALUES (` +
		`?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, cakec.Externalkind, cakec.Externalid, cakec.Correlationid)
	res, err := db.Exec(sqlstr, cakec.Externalkind, cakec.Externalid, cakec.Correlationid)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	cakec.ID = sql.NullInt64(id)
	cakec._exists = true

	return nil
}

// Update updates the CuptiActivityKindExternalCorrelation in the database.
func (cakec *CuptiActivityKindExternalCorrelation) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !cakec._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if cakec._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE CUPTI_ACTIVITY_KIND_EXTERNAL_CORRELATION SET ` +
		`externalKind = ?, externalId = ?, correlationId = ?` +
		` WHERE _id_ = ?`

	// run query
	XOLog(sqlstr, cakec.Externalkind, cakec.Externalid, cakec.Correlationid, cakec.ID)
	_, err = db.Exec(sqlstr, cakec.Externalkind, cakec.Externalid, cakec.Correlationid, cakec.ID)
	return err
}

// Save saves the CuptiActivityKindExternalCorrelation to the database.
func (cakec *CuptiActivityKindExternalCorrelation) Save(db XODB) error {
	if cakec.Exists() {
		return cakec.Update(db)
	}

	return cakec.Insert(db)
}

// Delete deletes the CuptiActivityKindExternalCorrelation from the database.
func (cakec *CuptiActivityKindExternalCorrelation) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !cakec._exists {
		return nil
	}

	// if deleted, bail
	if cakec._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM CUPTI_ACTIVITY_KIND_EXTERNAL_CORRELATION WHERE _id_ = ?`

	// run query
	XOLog(sqlstr, cakec.ID)
	_, err = db.Exec(sqlstr, cakec.ID)
	if err != nil {
		return err
	}

	// set deleted
	cakec._deleted = true

	return nil
}

// CuptiActivityKindExternalCorrelationByID retrieves a row from 'CUPTI_ACTIVITY_KIND_EXTERNAL_CORRELATION' as a CuptiActivityKindExternalCorrelation.
//
// Generated from index 'CUPTI_ACTIVITY_KIND_EXTERNAL_CORRELATION__id__pkey'.
func CuptiActivityKindExternalCorrelationByID(db XODB, id sql.NullInt64) (*CuptiActivityKindExternalCorrelation, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`_id_, externalKind, externalId, correlationId ` +
		`FROM CUPTI_ACTIVITY_KIND_EXTERNAL_CORRELATION ` +
		`WHERE _id_ = ?`

	// run query
	XOLog(sqlstr, id)
	cakec := CuptiActivityKindExternalCorrelation{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&cakec.ID, &cakec.Externalkind, &cakec.Externalid, &cakec.Correlationid)
	if err != nil {
		return nil, err
	}

	return &cakec, nil
}

// CuptiActivityKindExternalCorrelationsByCorrelationid retrieves a row from 'CUPTI_ACTIVITY_KIND_EXTERNAL_CORRELATION' as a CuptiActivityKindExternalCorrelation.
//
// Generated from index 'INDEX_CUPTI_ACTIVITY_KIND_EXTERNAL_CORRELATION'.
func CuptiActivityKindExternalCorrelationsByCorrelationid(db XODB, correlationid int) ([]*CuptiActivityKindExternalCorrelation, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`_id_, externalKind, externalId, correlationId ` +
		`FROM CUPTI_ACTIVITY_KIND_EXTERNAL_CORRELATION ` +
		`WHERE correlationId = ?`

	// run query
	XOLog(sqlstr, correlationid)
	q, err := db.Query(sqlstr, correlationid)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*CuptiActivityKindExternalCorrelation{}
	for q.Next() {
		cakec := CuptiActivityKindExternalCorrelation{
			_exists: true,
		}

		// scan
		err = q.Scan(&cakec.ID, &cakec.Externalkind, &cakec.Externalid, &cakec.Correlationid)
		if err != nil {
			return nil, err
		}

		res = append(res, &cakec)
	}

	return res, nil
}
