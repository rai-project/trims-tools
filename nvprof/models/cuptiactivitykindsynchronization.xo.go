// Package models contains the types for schema ''.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
)

// CuptiActivityKindSynchronization represents a row from 'CUPTI_ACTIVITY_KIND_SYNCHRONIZATION'.
type CuptiActivityKindSynchronization struct {
	ID            sql.NullInt64 `json:"_id_"`          // _id_
	Type          int           `json:"type"`          // type
	Start         int           `json:"start"`         // start
	End           int           `json:"end"`           // end
	Correlationid int           `json:"correlationId"` // correlationId
	Contextid     int           `json:"contextId"`     // contextId
	Streamid      int           `json:"streamId"`      // streamId
	Cudaeventid   int           `json:"cudaEventId"`   // cudaEventId

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the CuptiActivityKindSynchronization exists in the database.
func (caks *CuptiActivityKindSynchronization) Exists() bool {
	return caks._exists
}

// Deleted provides information if the CuptiActivityKindSynchronization has been deleted from the database.
func (caks *CuptiActivityKindSynchronization) Deleted() bool {
	return caks._deleted
}

// Insert inserts the CuptiActivityKindSynchronization to the database.
func (caks *CuptiActivityKindSynchronization) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if caks._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO CUPTI_ACTIVITY_KIND_SYNCHRONIZATION (` +
		`type, start, end, correlationId, contextId, streamId, cudaEventId` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, caks.Type, caks.Start, caks.End, caks.Correlationid, caks.Contextid, caks.Streamid, caks.Cudaeventid)
	res, err := db.Exec(sqlstr, caks.Type, caks.Start, caks.End, caks.Correlationid, caks.Contextid, caks.Streamid, caks.Cudaeventid)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	caks.ID = sql.NullInt64(id)
	caks._exists = true

	return nil
}

// Update updates the CuptiActivityKindSynchronization in the database.
func (caks *CuptiActivityKindSynchronization) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !caks._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if caks._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE CUPTI_ACTIVITY_KIND_SYNCHRONIZATION SET ` +
		`type = ?, start = ?, end = ?, correlationId = ?, contextId = ?, streamId = ?, cudaEventId = ?` +
		` WHERE _id_ = ?`

	// run query
	XOLog(sqlstr, caks.Type, caks.Start, caks.End, caks.Correlationid, caks.Contextid, caks.Streamid, caks.Cudaeventid, caks.ID)
	_, err = db.Exec(sqlstr, caks.Type, caks.Start, caks.End, caks.Correlationid, caks.Contextid, caks.Streamid, caks.Cudaeventid, caks.ID)
	return err
}

// Save saves the CuptiActivityKindSynchronization to the database.
func (caks *CuptiActivityKindSynchronization) Save(db XODB) error {
	if caks.Exists() {
		return caks.Update(db)
	}

	return caks.Insert(db)
}

// Delete deletes the CuptiActivityKindSynchronization from the database.
func (caks *CuptiActivityKindSynchronization) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !caks._exists {
		return nil
	}

	// if deleted, bail
	if caks._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM CUPTI_ACTIVITY_KIND_SYNCHRONIZATION WHERE _id_ = ?`

	// run query
	XOLog(sqlstr, caks.ID)
	_, err = db.Exec(sqlstr, caks.ID)
	if err != nil {
		return err
	}

	// set deleted
	caks._deleted = true

	return nil
}

// CuptiActivityKindSynchronizationByID retrieves a row from 'CUPTI_ACTIVITY_KIND_SYNCHRONIZATION' as a CuptiActivityKindSynchronization.
//
// Generated from index 'CUPTI_ACTIVITY_KIND_SYNCHRONIZATION__id__pkey'.
func CuptiActivityKindSynchronizationByID(db XODB, id sql.NullInt64) (*CuptiActivityKindSynchronization, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`_id_, type, start, end, correlationId, contextId, streamId, cudaEventId ` +
		`FROM CUPTI_ACTIVITY_KIND_SYNCHRONIZATION ` +
		`WHERE _id_ = ?`

	// run query
	XOLog(sqlstr, id)
	caks := CuptiActivityKindSynchronization{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&caks.ID, &caks.Type, &caks.Start, &caks.End, &caks.Correlationid, &caks.Contextid, &caks.Streamid, &caks.Cudaeventid)
	if err != nil {
		return nil, err
	}

	return &caks, nil
}

// CuptiActivityKindSynchronizationsByCorrelationid retrieves a row from 'CUPTI_ACTIVITY_KIND_SYNCHRONIZATION' as a CuptiActivityKindSynchronization.
//
// Generated from index 'INDEX_CUPTI_ACTIVITY_KIND_SYNCHRONIZATION'.
func CuptiActivityKindSynchronizationsByCorrelationid(db XODB, correlationid int) ([]*CuptiActivityKindSynchronization, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`_id_, type, start, end, correlationId, contextId, streamId, cudaEventId ` +
		`FROM CUPTI_ACTIVITY_KIND_SYNCHRONIZATION ` +
		`WHERE correlationId = ?`

	// run query
	XOLog(sqlstr, correlationid)
	q, err := db.Query(sqlstr, correlationid)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*CuptiActivityKindSynchronization{}
	for q.Next() {
		caks := CuptiActivityKindSynchronization{
			_exists: true,
		}

		// scan
		err = q.Scan(&caks.ID, &caks.Type, &caks.Start, &caks.End, &caks.Correlationid, &caks.Contextid, &caks.Streamid, &caks.Cudaeventid)
		if err != nil {
			return nil, err
		}

		res = append(res, &caks)
	}

	return res, nil
}
