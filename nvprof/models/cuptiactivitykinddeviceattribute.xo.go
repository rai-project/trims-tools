// Package models contains the types for schema ''.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
)

// CuptiActivityKindDeviceAttribute represents a row from 'CUPTI_ACTIVITY_KIND_DEVICE_ATTRIBUTE'.
type CuptiActivityKindDeviceAttribute struct {
	ID        sql.NullInt64 `json:"_id_"`      // _id_
	Flags     int           `json:"flags"`     // flags
	Deviceid  int           `json:"deviceId"`  // deviceId
	Attribute []byte        `json:"attribute"` // attribute
	Value     []byte        `json:"value"`     // value

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the CuptiActivityKindDeviceAttribute exists in the database.
func (cakda *CuptiActivityKindDeviceAttribute) Exists() bool {
	return cakda._exists
}

// Deleted provides information if the CuptiActivityKindDeviceAttribute has been deleted from the database.
func (cakda *CuptiActivityKindDeviceAttribute) Deleted() bool {
	return cakda._deleted
}

// Insert inserts the CuptiActivityKindDeviceAttribute to the database.
func (cakda *CuptiActivityKindDeviceAttribute) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if cakda._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO CUPTI_ACTIVITY_KIND_DEVICE_ATTRIBUTE (` +
		`flags, deviceId, attribute, value` +
		`) VALUES (` +
		`?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, cakda.Flags, cakda.Deviceid, cakda.Attribute, cakda.Value)
	res, err := db.Exec(sqlstr, cakda.Flags, cakda.Deviceid, cakda.Attribute, cakda.Value)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	cakda.ID = sql.NullInt64(id)
	cakda._exists = true

	return nil
}

// Update updates the CuptiActivityKindDeviceAttribute in the database.
func (cakda *CuptiActivityKindDeviceAttribute) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !cakda._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if cakda._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE CUPTI_ACTIVITY_KIND_DEVICE_ATTRIBUTE SET ` +
		`flags = ?, deviceId = ?, attribute = ?, value = ?` +
		` WHERE _id_ = ?`

	// run query
	XOLog(sqlstr, cakda.Flags, cakda.Deviceid, cakda.Attribute, cakda.Value, cakda.ID)
	_, err = db.Exec(sqlstr, cakda.Flags, cakda.Deviceid, cakda.Attribute, cakda.Value, cakda.ID)
	return err
}

// Save saves the CuptiActivityKindDeviceAttribute to the database.
func (cakda *CuptiActivityKindDeviceAttribute) Save(db XODB) error {
	if cakda.Exists() {
		return cakda.Update(db)
	}

	return cakda.Insert(db)
}

// Delete deletes the CuptiActivityKindDeviceAttribute from the database.
func (cakda *CuptiActivityKindDeviceAttribute) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !cakda._exists {
		return nil
	}

	// if deleted, bail
	if cakda._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM CUPTI_ACTIVITY_KIND_DEVICE_ATTRIBUTE WHERE _id_ = ?`

	// run query
	XOLog(sqlstr, cakda.ID)
	_, err = db.Exec(sqlstr, cakda.ID)
	if err != nil {
		return err
	}

	// set deleted
	cakda._deleted = true

	return nil
}

// CuptiActivityKindDeviceAttributeByID retrieves a row from 'CUPTI_ACTIVITY_KIND_DEVICE_ATTRIBUTE' as a CuptiActivityKindDeviceAttribute.
//
// Generated from index 'CUPTI_ACTIVITY_KIND_DEVICE_ATTRIBUTE__id__pkey'.
func CuptiActivityKindDeviceAttributeByID(db XODB, id sql.NullInt64) (*CuptiActivityKindDeviceAttribute, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`_id_, flags, deviceId, attribute, value ` +
		`FROM CUPTI_ACTIVITY_KIND_DEVICE_ATTRIBUTE ` +
		`WHERE _id_ = ?`

	// run query
	XOLog(sqlstr, id)
	cakda := CuptiActivityKindDeviceAttribute{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&cakda.ID, &cakda.Flags, &cakda.Deviceid, &cakda.Attribute, &cakda.Value)
	if err != nil {
		return nil, err
	}

	return &cakda, nil
}
