// Package models contains the types for schema ''.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
)

// CuptiActivityKindOpenaccOther represents a row from 'CUPTI_ACTIVITY_KIND_OPENACC_OTHER'.
type CuptiActivityKindOpenaccOther struct {
	ID              sql.NullInt64 `json:"_id_"`            // _id_
	Eventkind       int           `json:"eventKind"`       // eventKind
	Parentconstruct int           `json:"parentConstruct"` // parentConstruct
	Version         int           `json:"version"`         // version
	Implicit        int           `json:"implicit"`        // implicit
	Devicetype      int           `json:"deviceType"`      // deviceType
	Devicenumber    int           `json:"deviceNumber"`    // deviceNumber
	Threadid        int           `json:"threadId"`        // threadId
	Async           int           `json:"async"`           // async
	Asyncmap        int           `json:"asyncMap"`        // asyncMap
	Lineno          int           `json:"lineNo"`          // lineNo
	Endlineno       int           `json:"endLineNo"`       // endLineNo
	Funclineno      int           `json:"funcLineNo"`      // funcLineNo
	Funcendlineno   int           `json:"funcEndLineNo"`   // funcEndLineNo
	Start           int           `json:"start"`           // start
	End             int           `json:"end"`             // end
	Cudeviceid      int           `json:"cuDeviceId"`      // cuDeviceId
	Cucontextid     int           `json:"cuContextId"`     // cuContextId
	Custreamid      int           `json:"cuStreamId"`      // cuStreamId
	Cuprocessid     int           `json:"cuProcessId"`     // cuProcessId
	Cuthreadid      int           `json:"cuThreadId"`      // cuThreadId
	Externalid      int           `json:"externalId"`      // externalId
	Srcfile         int           `json:"srcFile"`         // srcFile
	Funcname        int           `json:"funcName"`        // funcName

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the CuptiActivityKindOpenaccOther exists in the database.
func (cakoo *CuptiActivityKindOpenaccOther) Exists() bool {
	return cakoo._exists
}

// Deleted provides information if the CuptiActivityKindOpenaccOther has been deleted from the database.
func (cakoo *CuptiActivityKindOpenaccOther) Deleted() bool {
	return cakoo._deleted
}

// Insert inserts the CuptiActivityKindOpenaccOther to the database.
func (cakoo *CuptiActivityKindOpenaccOther) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if cakoo._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO CUPTI_ACTIVITY_KIND_OPENACC_OTHER (` +
		`eventKind, parentConstruct, version, implicit, deviceType, deviceNumber, threadId, async, asyncMap, lineNo, endLineNo, funcLineNo, funcEndLineNo, start, end, cuDeviceId, cuContextId, cuStreamId, cuProcessId, cuThreadId, externalId, srcFile, funcName` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, cakoo.Eventkind, cakoo.Parentconstruct, cakoo.Version, cakoo.Implicit, cakoo.Devicetype, cakoo.Devicenumber, cakoo.Threadid, cakoo.Async, cakoo.Asyncmap, cakoo.Lineno, cakoo.Endlineno, cakoo.Funclineno, cakoo.Funcendlineno, cakoo.Start, cakoo.End, cakoo.Cudeviceid, cakoo.Cucontextid, cakoo.Custreamid, cakoo.Cuprocessid, cakoo.Cuthreadid, cakoo.Externalid, cakoo.Srcfile, cakoo.Funcname)
	res, err := db.Exec(sqlstr, cakoo.Eventkind, cakoo.Parentconstruct, cakoo.Version, cakoo.Implicit, cakoo.Devicetype, cakoo.Devicenumber, cakoo.Threadid, cakoo.Async, cakoo.Asyncmap, cakoo.Lineno, cakoo.Endlineno, cakoo.Funclineno, cakoo.Funcendlineno, cakoo.Start, cakoo.End, cakoo.Cudeviceid, cakoo.Cucontextid, cakoo.Custreamid, cakoo.Cuprocessid, cakoo.Cuthreadid, cakoo.Externalid, cakoo.Srcfile, cakoo.Funcname)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	cakoo.ID = sql.NullInt64(id)
	cakoo._exists = true

	return nil
}

// Update updates the CuptiActivityKindOpenaccOther in the database.
func (cakoo *CuptiActivityKindOpenaccOther) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !cakoo._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if cakoo._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE CUPTI_ACTIVITY_KIND_OPENACC_OTHER SET ` +
		`eventKind = ?, parentConstruct = ?, version = ?, implicit = ?, deviceType = ?, deviceNumber = ?, threadId = ?, async = ?, asyncMap = ?, lineNo = ?, endLineNo = ?, funcLineNo = ?, funcEndLineNo = ?, start = ?, end = ?, cuDeviceId = ?, cuContextId = ?, cuStreamId = ?, cuProcessId = ?, cuThreadId = ?, externalId = ?, srcFile = ?, funcName = ?` +
		` WHERE _id_ = ?`

	// run query
	XOLog(sqlstr, cakoo.Eventkind, cakoo.Parentconstruct, cakoo.Version, cakoo.Implicit, cakoo.Devicetype, cakoo.Devicenumber, cakoo.Threadid, cakoo.Async, cakoo.Asyncmap, cakoo.Lineno, cakoo.Endlineno, cakoo.Funclineno, cakoo.Funcendlineno, cakoo.Start, cakoo.End, cakoo.Cudeviceid, cakoo.Cucontextid, cakoo.Custreamid, cakoo.Cuprocessid, cakoo.Cuthreadid, cakoo.Externalid, cakoo.Srcfile, cakoo.Funcname, cakoo.ID)
	_, err = db.Exec(sqlstr, cakoo.Eventkind, cakoo.Parentconstruct, cakoo.Version, cakoo.Implicit, cakoo.Devicetype, cakoo.Devicenumber, cakoo.Threadid, cakoo.Async, cakoo.Asyncmap, cakoo.Lineno, cakoo.Endlineno, cakoo.Funclineno, cakoo.Funcendlineno, cakoo.Start, cakoo.End, cakoo.Cudeviceid, cakoo.Cucontextid, cakoo.Custreamid, cakoo.Cuprocessid, cakoo.Cuthreadid, cakoo.Externalid, cakoo.Srcfile, cakoo.Funcname, cakoo.ID)
	return err
}

// Save saves the CuptiActivityKindOpenaccOther to the database.
func (cakoo *CuptiActivityKindOpenaccOther) Save(db XODB) error {
	if cakoo.Exists() {
		return cakoo.Update(db)
	}

	return cakoo.Insert(db)
}

// Delete deletes the CuptiActivityKindOpenaccOther from the database.
func (cakoo *CuptiActivityKindOpenaccOther) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !cakoo._exists {
		return nil
	}

	// if deleted, bail
	if cakoo._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM CUPTI_ACTIVITY_KIND_OPENACC_OTHER WHERE _id_ = ?`

	// run query
	XOLog(sqlstr, cakoo.ID)
	_, err = db.Exec(sqlstr, cakoo.ID)
	if err != nil {
		return err
	}

	// set deleted
	cakoo._deleted = true

	return nil
}

// CuptiActivityKindOpenaccOtherByID retrieves a row from 'CUPTI_ACTIVITY_KIND_OPENACC_OTHER' as a CuptiActivityKindOpenaccOther.
//
// Generated from index 'CUPTI_ACTIVITY_KIND_OPENACC_OTHER__id__pkey'.
func CuptiActivityKindOpenaccOtherByID(db XODB, id sql.NullInt64) (*CuptiActivityKindOpenaccOther, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`_id_, eventKind, parentConstruct, version, implicit, deviceType, deviceNumber, threadId, async, asyncMap, lineNo, endLineNo, funcLineNo, funcEndLineNo, start, end, cuDeviceId, cuContextId, cuStreamId, cuProcessId, cuThreadId, externalId, srcFile, funcName ` +
		`FROM CUPTI_ACTIVITY_KIND_OPENACC_OTHER ` +
		`WHERE _id_ = ?`

	// run query
	XOLog(sqlstr, id)
	cakoo := CuptiActivityKindOpenaccOther{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&cakoo.ID, &cakoo.Eventkind, &cakoo.Parentconstruct, &cakoo.Version, &cakoo.Implicit, &cakoo.Devicetype, &cakoo.Devicenumber, &cakoo.Threadid, &cakoo.Async, &cakoo.Asyncmap, &cakoo.Lineno, &cakoo.Endlineno, &cakoo.Funclineno, &cakoo.Funcendlineno, &cakoo.Start, &cakoo.End, &cakoo.Cudeviceid, &cakoo.Cucontextid, &cakoo.Custreamid, &cakoo.Cuprocessid, &cakoo.Cuthreadid, &cakoo.Externalid, &cakoo.Srcfile, &cakoo.Funcname)
	if err != nil {
		return nil, err
	}

	return &cakoo, nil
}

// CuptiActivityKindOpenaccOthersByStart retrieves a row from 'CUPTI_ACTIVITY_KIND_OPENACC_OTHER' as a CuptiActivityKindOpenaccOther.
//
// Generated from index 'INDEX_CUPTI_ACTIVITY_KIND_OPENACC_OTHER'.
func CuptiActivityKindOpenaccOthersByStart(db XODB, start int) ([]*CuptiActivityKindOpenaccOther, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`_id_, eventKind, parentConstruct, version, implicit, deviceType, deviceNumber, threadId, async, asyncMap, lineNo, endLineNo, funcLineNo, funcEndLineNo, start, end, cuDeviceId, cuContextId, cuStreamId, cuProcessId, cuThreadId, externalId, srcFile, funcName ` +
		`FROM CUPTI_ACTIVITY_KIND_OPENACC_OTHER ` +
		`WHERE start = ?`

	// run query
	XOLog(sqlstr, start)
	q, err := db.Query(sqlstr, start)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*CuptiActivityKindOpenaccOther{}
	for q.Next() {
		cakoo := CuptiActivityKindOpenaccOther{
			_exists: true,
		}

		// scan
		err = q.Scan(&cakoo.ID, &cakoo.Eventkind, &cakoo.Parentconstruct, &cakoo.Version, &cakoo.Implicit, &cakoo.Devicetype, &cakoo.Devicenumber, &cakoo.Threadid, &cakoo.Async, &cakoo.Asyncmap, &cakoo.Lineno, &cakoo.Endlineno, &cakoo.Funclineno, &cakoo.Funcendlineno, &cakoo.Start, &cakoo.End, &cakoo.Cudeviceid, &cakoo.Cucontextid, &cakoo.Custreamid, &cakoo.Cuprocessid, &cakoo.Cuthreadid, &cakoo.Externalid, &cakoo.Srcfile, &cakoo.Funcname)
		if err != nil {
			return nil, err
		}

		res = append(res, &cakoo)
	}

	return res, nil
}
