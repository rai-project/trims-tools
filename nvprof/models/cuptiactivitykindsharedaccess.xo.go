// Package models contains the types for schema ''.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
)

// CuptiActivityKindSharedAccess represents a row from 'CUPTI_ACTIVITY_KIND_SHARED_ACCESS'.
type CuptiActivityKindSharedAccess struct {
	ID                            sql.NullInt64 `json:"_id_"`                          // _id_
	Flags                         int           `json:"flags"`                         // flags
	Sourcelocatorid               int           `json:"sourceLocatorId"`               // sourceLocatorId
	Correlationid                 int           `json:"correlationId"`                 // correlationId
	Functionid                    int           `json:"functionId"`                    // functionId
	Pcoffset                      int           `json:"pcOffset"`                      // pcOffset
	Threadsexecuted               int           `json:"threadsExecuted"`               // threadsExecuted
	Sharedtransactions            int           `json:"sharedTransactions"`            // sharedTransactions
	Theoreticalsharedtransactions int           `json:"theoreticalSharedTransactions"` // theoreticalSharedTransactions
	Executed                      int           `json:"executed"`                      // executed

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the CuptiActivityKindSharedAccess exists in the database.
func (caksa *CuptiActivityKindSharedAccess) Exists() bool {
	return caksa._exists
}

// Deleted provides information if the CuptiActivityKindSharedAccess has been deleted from the database.
func (caksa *CuptiActivityKindSharedAccess) Deleted() bool {
	return caksa._deleted
}

// Insert inserts the CuptiActivityKindSharedAccess to the database.
func (caksa *CuptiActivityKindSharedAccess) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if caksa._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO CUPTI_ACTIVITY_KIND_SHARED_ACCESS (` +
		`flags, sourceLocatorId, correlationId, functionId, pcOffset, threadsExecuted, sharedTransactions, theoreticalSharedTransactions, executed` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, caksa.Flags, caksa.Sourcelocatorid, caksa.Correlationid, caksa.Functionid, caksa.Pcoffset, caksa.Threadsexecuted, caksa.Sharedtransactions, caksa.Theoreticalsharedtransactions, caksa.Executed)
	res, err := db.Exec(sqlstr, caksa.Flags, caksa.Sourcelocatorid, caksa.Correlationid, caksa.Functionid, caksa.Pcoffset, caksa.Threadsexecuted, caksa.Sharedtransactions, caksa.Theoreticalsharedtransactions, caksa.Executed)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	caksa.ID = sql.NullInt64(id)
	caksa._exists = true

	return nil
}

// Update updates the CuptiActivityKindSharedAccess in the database.
func (caksa *CuptiActivityKindSharedAccess) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !caksa._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if caksa._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE CUPTI_ACTIVITY_KIND_SHARED_ACCESS SET ` +
		`flags = ?, sourceLocatorId = ?, correlationId = ?, functionId = ?, pcOffset = ?, threadsExecuted = ?, sharedTransactions = ?, theoreticalSharedTransactions = ?, executed = ?` +
		` WHERE _id_ = ?`

	// run query
	XOLog(sqlstr, caksa.Flags, caksa.Sourcelocatorid, caksa.Correlationid, caksa.Functionid, caksa.Pcoffset, caksa.Threadsexecuted, caksa.Sharedtransactions, caksa.Theoreticalsharedtransactions, caksa.Executed, caksa.ID)
	_, err = db.Exec(sqlstr, caksa.Flags, caksa.Sourcelocatorid, caksa.Correlationid, caksa.Functionid, caksa.Pcoffset, caksa.Threadsexecuted, caksa.Sharedtransactions, caksa.Theoreticalsharedtransactions, caksa.Executed, caksa.ID)
	return err
}

// Save saves the CuptiActivityKindSharedAccess to the database.
func (caksa *CuptiActivityKindSharedAccess) Save(db XODB) error {
	if caksa.Exists() {
		return caksa.Update(db)
	}

	return caksa.Insert(db)
}

// Delete deletes the CuptiActivityKindSharedAccess from the database.
func (caksa *CuptiActivityKindSharedAccess) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !caksa._exists {
		return nil
	}

	// if deleted, bail
	if caksa._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM CUPTI_ACTIVITY_KIND_SHARED_ACCESS WHERE _id_ = ?`

	// run query
	XOLog(sqlstr, caksa.ID)
	_, err = db.Exec(sqlstr, caksa.ID)
	if err != nil {
		return err
	}

	// set deleted
	caksa._deleted = true

	return nil
}

// CuptiActivityKindSharedAccessByID retrieves a row from 'CUPTI_ACTIVITY_KIND_SHARED_ACCESS' as a CuptiActivityKindSharedAccess.
//
// Generated from index 'CUPTI_ACTIVITY_KIND_SHARED_ACCESS__id__pkey'.
func CuptiActivityKindSharedAccessByID(db XODB, id sql.NullInt64) (*CuptiActivityKindSharedAccess, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`_id_, flags, sourceLocatorId, correlationId, functionId, pcOffset, threadsExecuted, sharedTransactions, theoreticalSharedTransactions, executed ` +
		`FROM CUPTI_ACTIVITY_KIND_SHARED_ACCESS ` +
		`WHERE _id_ = ?`

	// run query
	XOLog(sqlstr, id)
	caksa := CuptiActivityKindSharedAccess{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&caksa.ID, &caksa.Flags, &caksa.Sourcelocatorid, &caksa.Correlationid, &caksa.Functionid, &caksa.Pcoffset, &caksa.Threadsexecuted, &caksa.Sharedtransactions, &caksa.Theoreticalsharedtransactions, &caksa.Executed)
	if err != nil {
		return nil, err
	}

	return &caksa, nil
}

// CuptiActivityKindSharedAccessesByCorrelationid retrieves a row from 'CUPTI_ACTIVITY_KIND_SHARED_ACCESS' as a CuptiActivityKindSharedAccess.
//
// Generated from index 'INDEX_CUPTI_ACTIVITY_KIND_SHARED_ACCESS'.
func CuptiActivityKindSharedAccessesByCorrelationid(db XODB, correlationid int) ([]*CuptiActivityKindSharedAccess, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`_id_, flags, sourceLocatorId, correlationId, functionId, pcOffset, threadsExecuted, sharedTransactions, theoreticalSharedTransactions, executed ` +
		`FROM CUPTI_ACTIVITY_KIND_SHARED_ACCESS ` +
		`WHERE correlationId = ?`

	// run query
	XOLog(sqlstr, correlationid)
	q, err := db.Query(sqlstr, correlationid)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*CuptiActivityKindSharedAccess{}
	for q.Next() {
		caksa := CuptiActivityKindSharedAccess{
			_exists: true,
		}

		// scan
		err = q.Scan(&caksa.ID, &caksa.Flags, &caksa.Sourcelocatorid, &caksa.Correlationid, &caksa.Functionid, &caksa.Pcoffset, &caksa.Threadsexecuted, &caksa.Sharedtransactions, &caksa.Theoreticalsharedtransactions, &caksa.Executed)
		if err != nil {
			return nil, err
		}

		res = append(res, &caksa)
	}

	return res, nil
}
