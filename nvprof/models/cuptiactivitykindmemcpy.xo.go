// Package models contains the types for schema ''.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
)

// CuptiActivityKindMemcpy represents a row from 'CUPTI_ACTIVITY_KIND_MEMCPY'.
type CuptiActivityKindMemcpy struct {
	ID                   sql.NullInt64 `json:"_id_"`                 // _id_
	Copykind             int           `json:"copyKind"`             // copyKind
	Srckind              int           `json:"srcKind"`              // srcKind
	Dstkind              int           `json:"dstKind"`              // dstKind
	Flags                int           `json:"flags"`                // flags
	Bytes                int           `json:"bytes"`                // bytes
	Start                int           `json:"start"`                // start
	End                  int           `json:"end"`                  // end
	Deviceid             int           `json:"deviceId"`             // deviceId
	Contextid            int           `json:"contextId"`            // contextId
	Streamid             int           `json:"streamId"`             // streamId
	Correlationid        int           `json:"correlationId"`        // correlationId
	Runtimecorrelationid int           `json:"runtimeCorrelationId"` // runtimeCorrelationId

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the CuptiActivityKindMemcpy exists in the database.
func (cakm *CuptiActivityKindMemcpy) Exists() bool {
	return cakm._exists
}

// Deleted provides information if the CuptiActivityKindMemcpy has been deleted from the database.
func (cakm *CuptiActivityKindMemcpy) Deleted() bool {
	return cakm._deleted
}

// Insert inserts the CuptiActivityKindMemcpy to the database.
func (cakm *CuptiActivityKindMemcpy) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if cakm._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO CUPTI_ACTIVITY_KIND_MEMCPY (` +
		`copyKind, srcKind, dstKind, flags, bytes, start, end, deviceId, contextId, streamId, correlationId, runtimeCorrelationId` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, cakm.Copykind, cakm.Srckind, cakm.Dstkind, cakm.Flags, cakm.Bytes, cakm.Start, cakm.End, cakm.Deviceid, cakm.Contextid, cakm.Streamid, cakm.Correlationid, cakm.Runtimecorrelationid)
	res, err := db.Exec(sqlstr, cakm.Copykind, cakm.Srckind, cakm.Dstkind, cakm.Flags, cakm.Bytes, cakm.Start, cakm.End, cakm.Deviceid, cakm.Contextid, cakm.Streamid, cakm.Correlationid, cakm.Runtimecorrelationid)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	cakm.ID = sql.NullInt64(id)
	cakm._exists = true

	return nil
}

// Update updates the CuptiActivityKindMemcpy in the database.
func (cakm *CuptiActivityKindMemcpy) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !cakm._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if cakm._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE CUPTI_ACTIVITY_KIND_MEMCPY SET ` +
		`copyKind = ?, srcKind = ?, dstKind = ?, flags = ?, bytes = ?, start = ?, end = ?, deviceId = ?, contextId = ?, streamId = ?, correlationId = ?, runtimeCorrelationId = ?` +
		` WHERE _id_ = ?`

	// run query
	XOLog(sqlstr, cakm.Copykind, cakm.Srckind, cakm.Dstkind, cakm.Flags, cakm.Bytes, cakm.Start, cakm.End, cakm.Deviceid, cakm.Contextid, cakm.Streamid, cakm.Correlationid, cakm.Runtimecorrelationid, cakm.ID)
	_, err = db.Exec(sqlstr, cakm.Copykind, cakm.Srckind, cakm.Dstkind, cakm.Flags, cakm.Bytes, cakm.Start, cakm.End, cakm.Deviceid, cakm.Contextid, cakm.Streamid, cakm.Correlationid, cakm.Runtimecorrelationid, cakm.ID)
	return err
}

// Save saves the CuptiActivityKindMemcpy to the database.
func (cakm *CuptiActivityKindMemcpy) Save(db XODB) error {
	if cakm.Exists() {
		return cakm.Update(db)
	}

	return cakm.Insert(db)
}

// Delete deletes the CuptiActivityKindMemcpy from the database.
func (cakm *CuptiActivityKindMemcpy) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !cakm._exists {
		return nil
	}

	// if deleted, bail
	if cakm._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM CUPTI_ACTIVITY_KIND_MEMCPY WHERE _id_ = ?`

	// run query
	XOLog(sqlstr, cakm.ID)
	_, err = db.Exec(sqlstr, cakm.ID)
	if err != nil {
		return err
	}

	// set deleted
	cakm._deleted = true

	return nil
}

// CuptiActivityKindMemcpyByID retrieves a row from 'CUPTI_ACTIVITY_KIND_MEMCPY' as a CuptiActivityKindMemcpy.
//
// Generated from index 'CUPTI_ACTIVITY_KIND_MEMCPY__id__pkey'.
func CuptiActivityKindMemcpyByID(db XODB, id sql.NullInt64) (*CuptiActivityKindMemcpy, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`_id_, copyKind, srcKind, dstKind, flags, bytes, start, end, deviceId, contextId, streamId, correlationId, runtimeCorrelationId ` +
		`FROM CUPTI_ACTIVITY_KIND_MEMCPY ` +
		`WHERE _id_ = ?`

	// run query
	XOLog(sqlstr, id)
	cakm := CuptiActivityKindMemcpy{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&cakm.ID, &cakm.Copykind, &cakm.Srckind, &cakm.Dstkind, &cakm.Flags, &cakm.Bytes, &cakm.Start, &cakm.End, &cakm.Deviceid, &cakm.Contextid, &cakm.Streamid, &cakm.Correlationid, &cakm.Runtimecorrelationid)
	if err != nil {
		return nil, err
	}

	return &cakm, nil
}

// CuptiActivityKindMemcpiesByCorrelationid retrieves a row from 'CUPTI_ACTIVITY_KIND_MEMCPY' as a CuptiActivityKindMemcpy.
//
// Generated from index 'INDEX_CUPTI_ACTIVITY_KIND_MEMCPY'.
func CuptiActivityKindMemcpiesByCorrelationid(db XODB, correlationid int) ([]*CuptiActivityKindMemcpy, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`_id_, copyKind, srcKind, dstKind, flags, bytes, start, end, deviceId, contextId, streamId, correlationId, runtimeCorrelationId ` +
		`FROM CUPTI_ACTIVITY_KIND_MEMCPY ` +
		`WHERE correlationId = ?`

	// run query
	XOLog(sqlstr, correlationid)
	q, err := db.Query(sqlstr, correlationid)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*CuptiActivityKindMemcpy{}
	for q.Next() {
		cakm := CuptiActivityKindMemcpy{
			_exists: true,
		}

		// scan
		err = q.Scan(&cakm.ID, &cakm.Copykind, &cakm.Srckind, &cakm.Dstkind, &cakm.Flags, &cakm.Bytes, &cakm.Start, &cakm.End, &cakm.Deviceid, &cakm.Contextid, &cakm.Streamid, &cakm.Correlationid, &cakm.Runtimecorrelationid)
		if err != nil {
			return nil, err
		}

		res = append(res, &cakm)
	}

	return res, nil
}
