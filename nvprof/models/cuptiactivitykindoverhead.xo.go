// Package models contains the types for schema ''.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
)

// CuptiActivityKindOverhead represents a row from 'CUPTI_ACTIVITY_KIND_OVERHEAD'.
type CuptiActivityKindOverhead struct {
	ID           sql.NullInt64 `json:"_id_"`         // _id_
	Overheadkind int           `json:"overheadKind"` // overheadKind
	Objectkind   int           `json:"objectKind"`   // objectKind
	Objectid     []byte        `json:"objectId"`     // objectId
	Start        int           `json:"start"`        // start
	End          int           `json:"end"`          // end

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the CuptiActivityKindOverhead exists in the database.
func (cako *CuptiActivityKindOverhead) Exists() bool {
	return cako._exists
}

// Deleted provides information if the CuptiActivityKindOverhead has been deleted from the database.
func (cako *CuptiActivityKindOverhead) Deleted() bool {
	return cako._deleted
}

// Insert inserts the CuptiActivityKindOverhead to the database.
func (cako *CuptiActivityKindOverhead) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if cako._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO CUPTI_ACTIVITY_KIND_OVERHEAD (` +
		`overheadKind, objectKind, objectId, start, end` +
		`) VALUES (` +
		`?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, cako.Overheadkind, cako.Objectkind, cako.Objectid, cako.Start, cako.End)
	res, err := db.Exec(sqlstr, cako.Overheadkind, cako.Objectkind, cako.Objectid, cako.Start, cako.End)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	cako.ID = sql.NullInt64(id)
	cako._exists = true

	return nil
}

// Update updates the CuptiActivityKindOverhead in the database.
func (cako *CuptiActivityKindOverhead) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !cako._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if cako._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE CUPTI_ACTIVITY_KIND_OVERHEAD SET ` +
		`overheadKind = ?, objectKind = ?, objectId = ?, start = ?, end = ?` +
		` WHERE _id_ = ?`

	// run query
	XOLog(sqlstr, cako.Overheadkind, cako.Objectkind, cako.Objectid, cako.Start, cako.End, cako.ID)
	_, err = db.Exec(sqlstr, cako.Overheadkind, cako.Objectkind, cako.Objectid, cako.Start, cako.End, cako.ID)
	return err
}

// Save saves the CuptiActivityKindOverhead to the database.
func (cako *CuptiActivityKindOverhead) Save(db XODB) error {
	if cako.Exists() {
		return cako.Update(db)
	}

	return cako.Insert(db)
}

// Delete deletes the CuptiActivityKindOverhead from the database.
func (cako *CuptiActivityKindOverhead) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !cako._exists {
		return nil
	}

	// if deleted, bail
	if cako._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM CUPTI_ACTIVITY_KIND_OVERHEAD WHERE _id_ = ?`

	// run query
	XOLog(sqlstr, cako.ID)
	_, err = db.Exec(sqlstr, cako.ID)
	if err != nil {
		return err
	}

	// set deleted
	cako._deleted = true

	return nil
}

// CuptiActivityKindOverheadByID retrieves a row from 'CUPTI_ACTIVITY_KIND_OVERHEAD' as a CuptiActivityKindOverhead.
//
// Generated from index 'CUPTI_ACTIVITY_KIND_OVERHEAD__id__pkey'.
func CuptiActivityKindOverheadByID(db XODB, id sql.NullInt64) (*CuptiActivityKindOverhead, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`_id_, overheadKind, objectKind, objectId, start, end ` +
		`FROM CUPTI_ACTIVITY_KIND_OVERHEAD ` +
		`WHERE _id_ = ?`

	// run query
	XOLog(sqlstr, id)
	cako := CuptiActivityKindOverhead{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&cako.ID, &cako.Overheadkind, &cako.Objectkind, &cako.Objectid, &cako.Start, &cako.End)
	if err != nil {
		return nil, err
	}

	return &cako, nil
}

// CuptiActivityKindOverheadsByStart retrieves a row from 'CUPTI_ACTIVITY_KIND_OVERHEAD' as a CuptiActivityKindOverhead.
//
// Generated from index 'INDEX_CUPTI_ACTIVITY_KIND_OVERHEAD'.
func CuptiActivityKindOverheadsByStart(db XODB, start int) ([]*CuptiActivityKindOverhead, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`_id_, overheadKind, objectKind, objectId, start, end ` +
		`FROM CUPTI_ACTIVITY_KIND_OVERHEAD ` +
		`WHERE start = ?`

	// run query
	XOLog(sqlstr, start)
	q, err := db.Query(sqlstr, start)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*CuptiActivityKindOverhead{}
	for q.Next() {
		cako := CuptiActivityKindOverhead{
			_exists: true,
		}

		// scan
		err = q.Scan(&cako.ID, &cako.Overheadkind, &cako.Objectkind, &cako.Objectid, &cako.Start, &cako.End)
		if err != nil {
			return nil, err
		}

		res = append(res, &cako)
	}

	return res, nil
}
