// Package models contains the types for schema ''.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
)

// CuptiActivityKindFunction represents a row from 'CUPTI_ACTIVITY_KIND_FUNCTION'.
type CuptiActivityKindFunction struct {
	ID            sql.NullInt64 `json:"_id_"`          // _id_
	ID            int           `json:"id"`            // id
	Contextid     int           `json:"contextId"`     // contextId
	Moduleid      int           `json:"moduleId"`      // moduleId
	Functionindex int           `json:"functionIndex"` // functionIndex
	Name          int           `json:"name"`          // name

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the CuptiActivityKindFunction exists in the database.
func (cakf *CuptiActivityKindFunction) Exists() bool {
	return cakf._exists
}

// Deleted provides information if the CuptiActivityKindFunction has been deleted from the database.
func (cakf *CuptiActivityKindFunction) Deleted() bool {
	return cakf._deleted
}

// Insert inserts the CuptiActivityKindFunction to the database.
func (cakf *CuptiActivityKindFunction) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if cakf._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO CUPTI_ACTIVITY_KIND_FUNCTION (` +
		`contextId, moduleId, functionIndex, name` +
		`) VALUES (` +
		`?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, cakf.Contextid, cakf.Moduleid, cakf.Functionindex, cakf.Name)
	res, err := db.Exec(sqlstr, cakf.Contextid, cakf.Moduleid, cakf.Functionindex, cakf.Name)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	cakf.ID = sql.NullInt64(id)
	cakf._exists = true

	return nil
}

// Update updates the CuptiActivityKindFunction in the database.
func (cakf *CuptiActivityKindFunction) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !cakf._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if cakf._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE CUPTI_ACTIVITY_KIND_FUNCTION SET ` +
		`contextId = ?, moduleId = ?, functionIndex = ?, name = ?` +
		` WHERE _id_ = ?`

	// run query
	XOLog(sqlstr, cakf.Contextid, cakf.Moduleid, cakf.Functionindex, cakf.Name, cakf.ID)
	_, err = db.Exec(sqlstr, cakf.Contextid, cakf.Moduleid, cakf.Functionindex, cakf.Name, cakf.ID)
	return err
}

// Save saves the CuptiActivityKindFunction to the database.
func (cakf *CuptiActivityKindFunction) Save(db XODB) error {
	if cakf.Exists() {
		return cakf.Update(db)
	}

	return cakf.Insert(db)
}

// Delete deletes the CuptiActivityKindFunction from the database.
func (cakf *CuptiActivityKindFunction) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !cakf._exists {
		return nil
	}

	// if deleted, bail
	if cakf._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM CUPTI_ACTIVITY_KIND_FUNCTION WHERE _id_ = ?`

	// run query
	XOLog(sqlstr, cakf.ID)
	_, err = db.Exec(sqlstr, cakf.ID)
	if err != nil {
		return err
	}

	// set deleted
	cakf._deleted = true

	return nil
}

// CuptiActivityKindFunctionByID retrieves a row from 'CUPTI_ACTIVITY_KIND_FUNCTION' as a CuptiActivityKindFunction.
//
// Generated from index 'CUPTI_ACTIVITY_KIND_FUNCTION__id__pkey'.
func CuptiActivityKindFunctionByID(db XODB, id sql.NullInt64) (*CuptiActivityKindFunction, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`_id_, id, contextId, moduleId, functionIndex, name ` +
		`FROM CUPTI_ACTIVITY_KIND_FUNCTION ` +
		`WHERE _id_ = ?`

	// run query
	XOLog(sqlstr, id)
	cakf := CuptiActivityKindFunction{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&cakf.ID, &cakf.ID, &cakf.Contextid, &cakf.Moduleid, &cakf.Functionindex, &cakf.Name)
	if err != nil {
		return nil, err
	}

	return &cakf, nil
}
