// Package models contains the types for schema ''.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
)

// CuptiActivityKindGlobalAccess represents a row from 'CUPTI_ACTIVITY_KIND_GLOBAL_ACCESS'.
type CuptiActivityKindGlobalAccess struct {
	ID                        sql.NullInt64 `json:"_id_"`                      // _id_
	Flags                     int           `json:"flags"`                     // flags
	Sourcelocatorid           int           `json:"sourceLocatorId"`           // sourceLocatorId
	Correlationid             int           `json:"correlationId"`             // correlationId
	Functionid                int           `json:"functionId"`                // functionId
	Executed                  int           `json:"executed"`                  // executed
	Pcoffset                  int           `json:"pcOffset"`                  // pcOffset
	Threadsexecuted           int           `json:"threadsExecuted"`           // threadsExecuted
	L2Transactions            int           `json:"l2_transactions"`           // l2_transactions
	Theoreticall2transactions int           `json:"theoreticalL2Transactions"` // theoreticalL2Transactions

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the CuptiActivityKindGlobalAccess exists in the database.
func (cakga *CuptiActivityKindGlobalAccess) Exists() bool {
	return cakga._exists
}

// Deleted provides information if the CuptiActivityKindGlobalAccess has been deleted from the database.
func (cakga *CuptiActivityKindGlobalAccess) Deleted() bool {
	return cakga._deleted
}

// Insert inserts the CuptiActivityKindGlobalAccess to the database.
func (cakga *CuptiActivityKindGlobalAccess) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if cakga._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO CUPTI_ACTIVITY_KIND_GLOBAL_ACCESS (` +
		`flags, sourceLocatorId, correlationId, functionId, executed, pcOffset, threadsExecuted, l2_transactions, theoreticalL2Transactions` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, cakga.Flags, cakga.Sourcelocatorid, cakga.Correlationid, cakga.Functionid, cakga.Executed, cakga.Pcoffset, cakga.Threadsexecuted, cakga.L2Transactions, cakga.Theoreticall2transactions)
	res, err := db.Exec(sqlstr, cakga.Flags, cakga.Sourcelocatorid, cakga.Correlationid, cakga.Functionid, cakga.Executed, cakga.Pcoffset, cakga.Threadsexecuted, cakga.L2Transactions, cakga.Theoreticall2transactions)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	cakga.ID = sql.NullInt64(id)
	cakga._exists = true

	return nil
}

// Update updates the CuptiActivityKindGlobalAccess in the database.
func (cakga *CuptiActivityKindGlobalAccess) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !cakga._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if cakga._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE CUPTI_ACTIVITY_KIND_GLOBAL_ACCESS SET ` +
		`flags = ?, sourceLocatorId = ?, correlationId = ?, functionId = ?, executed = ?, pcOffset = ?, threadsExecuted = ?, l2_transactions = ?, theoreticalL2Transactions = ?` +
		` WHERE _id_ = ?`

	// run query
	XOLog(sqlstr, cakga.Flags, cakga.Sourcelocatorid, cakga.Correlationid, cakga.Functionid, cakga.Executed, cakga.Pcoffset, cakga.Threadsexecuted, cakga.L2Transactions, cakga.Theoreticall2transactions, cakga.ID)
	_, err = db.Exec(sqlstr, cakga.Flags, cakga.Sourcelocatorid, cakga.Correlationid, cakga.Functionid, cakga.Executed, cakga.Pcoffset, cakga.Threadsexecuted, cakga.L2Transactions, cakga.Theoreticall2transactions, cakga.ID)
	return err
}

// Save saves the CuptiActivityKindGlobalAccess to the database.
func (cakga *CuptiActivityKindGlobalAccess) Save(db XODB) error {
	if cakga.Exists() {
		return cakga.Update(db)
	}

	return cakga.Insert(db)
}

// Delete deletes the CuptiActivityKindGlobalAccess from the database.
func (cakga *CuptiActivityKindGlobalAccess) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !cakga._exists {
		return nil
	}

	// if deleted, bail
	if cakga._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM CUPTI_ACTIVITY_KIND_GLOBAL_ACCESS WHERE _id_ = ?`

	// run query
	XOLog(sqlstr, cakga.ID)
	_, err = db.Exec(sqlstr, cakga.ID)
	if err != nil {
		return err
	}

	// set deleted
	cakga._deleted = true

	return nil
}

// CuptiActivityKindGlobalAccessByID retrieves a row from 'CUPTI_ACTIVITY_KIND_GLOBAL_ACCESS' as a CuptiActivityKindGlobalAccess.
//
// Generated from index 'CUPTI_ACTIVITY_KIND_GLOBAL_ACCESS__id__pkey'.
func CuptiActivityKindGlobalAccessByID(db XODB, id sql.NullInt64) (*CuptiActivityKindGlobalAccess, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`_id_, flags, sourceLocatorId, correlationId, functionId, executed, pcOffset, threadsExecuted, l2_transactions, theoreticalL2Transactions ` +
		`FROM CUPTI_ACTIVITY_KIND_GLOBAL_ACCESS ` +
		`WHERE _id_ = ?`

	// run query
	XOLog(sqlstr, id)
	cakga := CuptiActivityKindGlobalAccess{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&cakga.ID, &cakga.Flags, &cakga.Sourcelocatorid, &cakga.Correlationid, &cakga.Functionid, &cakga.Executed, &cakga.Pcoffset, &cakga.Threadsexecuted, &cakga.L2Transactions, &cakga.Theoreticall2transactions)
	if err != nil {
		return nil, err
	}

	return &cakga, nil
}

// CuptiActivityKindGlobalAccessesByCorrelationid retrieves a row from 'CUPTI_ACTIVITY_KIND_GLOBAL_ACCESS' as a CuptiActivityKindGlobalAccess.
//
// Generated from index 'INDEX_CUPTI_ACTIVITY_KIND_GLOBAL_ACCESS'.
func CuptiActivityKindGlobalAccessesByCorrelationid(db XODB, correlationid int) ([]*CuptiActivityKindGlobalAccess, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`_id_, flags, sourceLocatorId, correlationId, functionId, executed, pcOffset, threadsExecuted, l2_transactions, theoreticalL2Transactions ` +
		`FROM CUPTI_ACTIVITY_KIND_GLOBAL_ACCESS ` +
		`WHERE correlationId = ?`

	// run query
	XOLog(sqlstr, correlationid)
	q, err := db.Query(sqlstr, correlationid)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*CuptiActivityKindGlobalAccess{}
	for q.Next() {
		cakga := CuptiActivityKindGlobalAccess{
			_exists: true,
		}

		// scan
		err = q.Scan(&cakga.ID, &cakga.Flags, &cakga.Sourcelocatorid, &cakga.Correlationid, &cakga.Functionid, &cakga.Executed, &cakga.Pcoffset, &cakga.Threadsexecuted, &cakga.L2Transactions, &cakga.Theoreticall2transactions)
		if err != nil {
			return nil, err
		}

		res = append(res, &cakga)
	}

	return res, nil
}
