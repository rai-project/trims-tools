// Package models contains the types for schema ''.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
)

// CuptiActivityKindInstructionCorrelation represents a row from 'CUPTI_ACTIVITY_KIND_INSTRUCTION_CORRELATION'.
type CuptiActivityKindInstructionCorrelation struct {
	ID              sql.NullInt64 `json:"_id_"`            // _id_
	Flags           int           `json:"flags"`           // flags
	Sourcelocatorid int           `json:"sourceLocatorId"` // sourceLocatorId
	Functionid      int           `json:"functionId"`      // functionId
	Pcoffset        int           `json:"pcOffset"`        // pcOffset

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the CuptiActivityKindInstructionCorrelation exists in the database.
func (cakic *CuptiActivityKindInstructionCorrelation) Exists() bool {
	return cakic._exists
}

// Deleted provides information if the CuptiActivityKindInstructionCorrelation has been deleted from the database.
func (cakic *CuptiActivityKindInstructionCorrelation) Deleted() bool {
	return cakic._deleted
}

// Insert inserts the CuptiActivityKindInstructionCorrelation to the database.
func (cakic *CuptiActivityKindInstructionCorrelation) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if cakic._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO CUPTI_ACTIVITY_KIND_INSTRUCTION_CORRELATION (` +
		`flags, sourceLocatorId, functionId, pcOffset` +
		`) VALUES (` +
		`?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, cakic.Flags, cakic.Sourcelocatorid, cakic.Functionid, cakic.Pcoffset)
	res, err := db.Exec(sqlstr, cakic.Flags, cakic.Sourcelocatorid, cakic.Functionid, cakic.Pcoffset)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	cakic.ID = sql.NullInt64(id)
	cakic._exists = true

	return nil
}

// Update updates the CuptiActivityKindInstructionCorrelation in the database.
func (cakic *CuptiActivityKindInstructionCorrelation) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !cakic._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if cakic._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE CUPTI_ACTIVITY_KIND_INSTRUCTION_CORRELATION SET ` +
		`flags = ?, sourceLocatorId = ?, functionId = ?, pcOffset = ?` +
		` WHERE _id_ = ?`

	// run query
	XOLog(sqlstr, cakic.Flags, cakic.Sourcelocatorid, cakic.Functionid, cakic.Pcoffset, cakic.ID)
	_, err = db.Exec(sqlstr, cakic.Flags, cakic.Sourcelocatorid, cakic.Functionid, cakic.Pcoffset, cakic.ID)
	return err
}

// Save saves the CuptiActivityKindInstructionCorrelation to the database.
func (cakic *CuptiActivityKindInstructionCorrelation) Save(db XODB) error {
	if cakic.Exists() {
		return cakic.Update(db)
	}

	return cakic.Insert(db)
}

// Delete deletes the CuptiActivityKindInstructionCorrelation from the database.
func (cakic *CuptiActivityKindInstructionCorrelation) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !cakic._exists {
		return nil
	}

	// if deleted, bail
	if cakic._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM CUPTI_ACTIVITY_KIND_INSTRUCTION_CORRELATION WHERE _id_ = ?`

	// run query
	XOLog(sqlstr, cakic.ID)
	_, err = db.Exec(sqlstr, cakic.ID)
	if err != nil {
		return err
	}

	// set deleted
	cakic._deleted = true

	return nil
}

// CuptiActivityKindInstructionCorrelationByID retrieves a row from 'CUPTI_ACTIVITY_KIND_INSTRUCTION_CORRELATION' as a CuptiActivityKindInstructionCorrelation.
//
// Generated from index 'CUPTI_ACTIVITY_KIND_INSTRUCTION_CORRELATION__id__pkey'.
func CuptiActivityKindInstructionCorrelationByID(db XODB, id sql.NullInt64) (*CuptiActivityKindInstructionCorrelation, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`_id_, flags, sourceLocatorId, functionId, pcOffset ` +
		`FROM CUPTI_ACTIVITY_KIND_INSTRUCTION_CORRELATION ` +
		`WHERE _id_ = ?`

	// run query
	XOLog(sqlstr, id)
	cakic := CuptiActivityKindInstructionCorrelation{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&cakic.ID, &cakic.Flags, &cakic.Sourcelocatorid, &cakic.Functionid, &cakic.Pcoffset)
	if err != nil {
		return nil, err
	}

	return &cakic, nil
}
